// Generated from https://github.com/nuke-build/nuke/blob/master/source/Nuke.Common/Tools/SqlPackage/SqlPackage.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.SqlPackage;

/// <summary>
///   <p>SqlPackage is a command-line utility that automates the following database development tasks by exposing some of the public Data-Tier Application Framework (DacFx) APIs</p>
///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage">official website</a>.</p>
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public partial class SqlPackageTasks
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public static string SqlPackagePath =>
        ToolPathResolver.TryGetEnvironmentExecutable("SQLPACKAGE_EXE") ??
        GetToolPath();
    public static Action<OutputType, string> SqlPackageLogger { get; set; } = ProcessTasks.DefaultLogger;
    public static Action<ToolSettings, IProcess> SqlPackageExitHandler { get; set; } = ProcessTasks.DefaultExitHandler;
    /// <summary>
    ///   <p>SqlPackage is a command-line utility that automates the following database development tasks by exposing some of the public Data-Tier Application Framework (DacFx) APIs</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage">official website</a>.</p>
    /// </summary>
    public static IReadOnlyCollection<Output> SqlPackage(ArgumentStringHandler arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Action<OutputType, string> logger = null, Action<IProcess> exitHandler = null)
    {
        using var process = ProcessTasks.StartProcess(SqlPackagePath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, logger ?? SqlPackageLogger);
        (exitHandler ?? (p => SqlPackageExitHandler.Invoke(null, p))).Invoke(process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>SqlPackage is a command-line utility that automates the following database development tasks by exposing some of the public Data-Tier Application Framework (DacFx) APIs</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver16#version">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageVersion(SqlPackageVersionSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageVersionSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>SqlPackage is a command-line utility that automates the following database development tasks by exposing some of the public Data-Tier Application Framework (DacFx) APIs</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver16#version">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageVersion(Configure<SqlPackageVersionSettings> configurator)
    {
        return SqlPackageVersion(configurator(new SqlPackageVersionSettings()));
    }
    /// <summary>
    ///   <p>SqlPackage is a command-line utility that automates the following database development tasks by exposing some of the public Data-Tier Application Framework (DacFx) APIs</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver16#version">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    /// </remarks>
    public static IEnumerable<(SqlPackageVersionSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageVersion(CombinatorialConfigure<SqlPackageVersionSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageVersion, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage publish operation incrementally updates the schema of a target database to match the structure of a source database. Publishing a deployment package that contains user data for all or a subset of tables update the table data in addition to the schema. Data deployment overwrites the schema and data in existing tables of the target database. Data deployment will not change existing schema or data in the target database for tables not included in the deployment package. A new database can be created by the publish action when the authenticated user has create database permissions. The required permissions for the publish action on an existing database is db_owner.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-publish">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackagePublishSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackagePublishSettings.AzureCloudConfig"/></li>
    ///     <li><c>/AzureKeyVaultAuthMethod</c> via <see cref="SqlPackagePublishSettings.AzureKeyVaultAuthMethod"/></li>
    ///     <li><c>/ClientId</c> via <see cref="SqlPackagePublishSettings.ClientId"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackagePublishSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackagePublishSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackagePublishSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackagePublishSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackagePublishSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackagePublishSettings.ModelFilePath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackagePublishSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackagePublishSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackagePublishSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackagePublishSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackagePublishSettings.ReferencePaths"/></li>
    ///     <li><c>/Secret</c> via <see cref="SqlPackagePublishSettings.Secret"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackagePublishSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackagePublishSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackagePublishSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackagePublishSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackagePublishSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackagePublishSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackagePublishSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackagePublishSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackagePublishSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackagePublishSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackagePublishSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackagePublishSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackagePublishSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackagePublishSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackagePublishSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackagePublishSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackagePublish(SqlPackagePublishSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackagePublishSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage publish operation incrementally updates the schema of a target database to match the structure of a source database. Publishing a deployment package that contains user data for all or a subset of tables update the table data in addition to the schema. Data deployment overwrites the schema and data in existing tables of the target database. Data deployment will not change existing schema or data in the target database for tables not included in the deployment package. A new database can be created by the publish action when the authenticated user has create database permissions. The required permissions for the publish action on an existing database is db_owner.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-publish">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackagePublishSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackagePublishSettings.AzureCloudConfig"/></li>
    ///     <li><c>/AzureKeyVaultAuthMethod</c> via <see cref="SqlPackagePublishSettings.AzureKeyVaultAuthMethod"/></li>
    ///     <li><c>/ClientId</c> via <see cref="SqlPackagePublishSettings.ClientId"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackagePublishSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackagePublishSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackagePublishSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackagePublishSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackagePublishSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackagePublishSettings.ModelFilePath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackagePublishSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackagePublishSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackagePublishSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackagePublishSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackagePublishSettings.ReferencePaths"/></li>
    ///     <li><c>/Secret</c> via <see cref="SqlPackagePublishSettings.Secret"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackagePublishSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackagePublishSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackagePublishSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackagePublishSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackagePublishSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackagePublishSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackagePublishSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackagePublishSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackagePublishSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackagePublishSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackagePublishSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackagePublishSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackagePublishSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackagePublishSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackagePublishSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackagePublishSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackagePublish(Configure<SqlPackagePublishSettings> configurator)
    {
        return SqlPackagePublish(configurator(new SqlPackagePublishSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage publish operation incrementally updates the schema of a target database to match the structure of a source database. Publishing a deployment package that contains user data for all or a subset of tables update the table data in addition to the schema. Data deployment overwrites the schema and data in existing tables of the target database. Data deployment will not change existing schema or data in the target database for tables not included in the deployment package. A new database can be created by the publish action when the authenticated user has create database permissions. The required permissions for the publish action on an existing database is db_owner.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-publish">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackagePublishSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackagePublishSettings.AzureCloudConfig"/></li>
    ///     <li><c>/AzureKeyVaultAuthMethod</c> via <see cref="SqlPackagePublishSettings.AzureKeyVaultAuthMethod"/></li>
    ///     <li><c>/ClientId</c> via <see cref="SqlPackagePublishSettings.ClientId"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackagePublishSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackagePublishSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackagePublishSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackagePublishSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackagePublishSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackagePublishSettings.ModelFilePath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackagePublishSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackagePublishSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackagePublishSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackagePublishSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackagePublishSettings.ReferencePaths"/></li>
    ///     <li><c>/Secret</c> via <see cref="SqlPackagePublishSettings.Secret"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackagePublishSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackagePublishSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackagePublishSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackagePublishSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackagePublishSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackagePublishSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackagePublishSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackagePublishSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackagePublishSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackagePublishSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackagePublishSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackagePublishSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackagePublishSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackagePublishSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackagePublishSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackagePublishSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackagePublishSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackagePublishSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackagePublish(CombinatorialConfigure<SqlPackagePublishSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackagePublish, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage DeployReport action creates an XML report of the changes that would be made by a publish action</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDeployReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDeployReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDeployReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDeployReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDeployReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageDeployReportSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageDeployReportSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDeployReportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageDeployReportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageDeployReportSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageDeployReportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageDeployReportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageDeployReportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageDeployReportSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDeployReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageDeployReportSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDeployReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDeployReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDeployReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDeployReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDeployReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageDeployReportSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageDeployReport(SqlPackageDeployReportSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageDeployReportSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage DeployReport action creates an XML report of the changes that would be made by a publish action</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDeployReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDeployReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDeployReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDeployReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDeployReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageDeployReportSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageDeployReportSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDeployReportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageDeployReportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageDeployReportSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageDeployReportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageDeployReportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageDeployReportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageDeployReportSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDeployReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageDeployReportSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDeployReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDeployReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDeployReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDeployReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDeployReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageDeployReportSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageDeployReport(Configure<SqlPackageDeployReportSettings> configurator)
    {
        return SqlPackageDeployReport(configurator(new SqlPackageDeployReportSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage DeployReport action creates an XML report of the changes that would be made by a publish action</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDeployReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDeployReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDeployReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDeployReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDeployReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageDeployReportSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageDeployReportSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDeployReportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageDeployReportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageDeployReportSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageDeployReportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageDeployReportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageDeployReportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageDeployReportSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDeployReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDeployReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDeployReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageDeployReportSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDeployReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDeployReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDeployReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDeployReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDeployReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageDeployReportSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageDeployReportSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageDeployReport(CombinatorialConfigure<SqlPackageDeployReportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageDeployReport, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage DriftReport action creates an XML report of the changes that have been made to the registered database since it was last registered.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDriftReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDriftReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDriftReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDriftReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDriftReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDriftReportSettings.Quiet"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDriftReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDriftReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDriftReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDriftReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDriftReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDriftReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDriftReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDriftReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageDriftReport(SqlPackageDriftReportSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageDriftReportSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage DriftReport action creates an XML report of the changes that have been made to the registered database since it was last registered.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDriftReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDriftReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDriftReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDriftReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDriftReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDriftReportSettings.Quiet"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDriftReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDriftReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDriftReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDriftReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDriftReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDriftReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDriftReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDriftReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageDriftReport(Configure<SqlPackageDriftReportSettings> configurator)
    {
        return SqlPackageDriftReport(configurator(new SqlPackageDriftReportSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage DriftReport action creates an XML report of the changes that have been made to the registered database since it was last registered.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-deploy-drift-report">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageDriftReportSettings.AccessToken"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageDriftReportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageDriftReportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageDriftReportSettings.MaxParallelism"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageDriftReportSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageDriftReportSettings.Quiet"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageDriftReportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageDriftReportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageDriftReportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageDriftReportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageDriftReportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageDriftReportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageDriftReportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageDriftReportSettings.TenantId"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageDriftReportSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageDriftReport(CombinatorialConfigure<SqlPackageDriftReportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageDriftReport, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage Script action creates a Transact-SQL incremental update script that updates the schema of a target database to match the schema of a source database.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-script">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageScriptSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageScriptSettings.AzureCloudConfig"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackageScriptSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackageScriptSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageScriptSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageScriptSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageScriptSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageScriptSettings.ModelFilePath"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageScriptSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageScriptSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageScriptSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageScriptSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageScriptSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackageScriptSettings.ReferencePaths"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageScriptSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageScriptSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageScriptSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageScriptSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageScriptSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageScriptSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageScriptSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageScriptSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageScriptSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageScriptSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageScriptSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageScriptSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageScriptSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageScriptSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageScriptSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageScriptSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageScriptSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageScriptSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageScriptSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageScript(SqlPackageScriptSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageScriptSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage Script action creates a Transact-SQL incremental update script that updates the schema of a target database to match the schema of a source database.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-script">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageScriptSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageScriptSettings.AzureCloudConfig"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackageScriptSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackageScriptSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageScriptSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageScriptSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageScriptSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageScriptSettings.ModelFilePath"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageScriptSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageScriptSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageScriptSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageScriptSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageScriptSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackageScriptSettings.ReferencePaths"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageScriptSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageScriptSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageScriptSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageScriptSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageScriptSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageScriptSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageScriptSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageScriptSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageScriptSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageScriptSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageScriptSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageScriptSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageScriptSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageScriptSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageScriptSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageScriptSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageScriptSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageScriptSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageScriptSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageScript(Configure<SqlPackageScriptSettings> configurator)
    {
        return SqlPackageScript(configurator(new SqlPackageScriptSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage Script action creates a Transact-SQL incremental update script that updates the schema of a target database to match the schema of a source database.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-script">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageScriptSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageScriptSettings.AzureCloudConfig"/></li>
    ///     <li><c>/DeployReportPath</c> via <see cref="SqlPackageScriptSettings.DeployReportPath"/></li>
    ///     <li><c>/DeployScriptPath</c> via <see cref="SqlPackageScriptSettings.DeployScriptPath"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageScriptSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageScriptSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageScriptSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageScriptSettings.ModelFilePath"/></li>
    ///     <li><c>/OutputPath</c> via <see cref="SqlPackageScriptSettings.OutputPath"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageScriptSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageScriptSettings.Properties"/></li>
    ///     <li><c>/Profile</c> via <see cref="SqlPackageScriptSettings.Profile"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageScriptSettings.Quiet"/></li>
    ///     <li><c>/rp</c> via <see cref="SqlPackageScriptSettings.ReferencePaths"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageScriptSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageScriptSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageScriptSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageScriptSettings.SourceFile"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageScriptSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageScriptSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageScriptSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageScriptSettings.SourceUser"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageScriptSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageScriptSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageScriptSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageScriptSettings.TargetFile"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageScriptSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageScriptSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageScriptSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageScriptSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageScriptSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageScriptSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageScriptSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></li>
    ///     <li><c>/v</c> via <see cref="SqlPackageScriptSettings.Variables"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageScriptSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageScript(CombinatorialConfigure<SqlPackageScriptSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageScript, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage Import action imports the schema and table data from a BACPAC file (.bacpac) into a new or empty database in SQL Server or Azure SQL Database. At the time of the import operation to an existing database the target database cannot contain any user-defined schema objects. Alternatively, a new database can be created by the import action when the authenticated user has create database permissions.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-import">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageImportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageImportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageImportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageImportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageImportSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageImportSettings.ModelFilePath"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageImportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageImportSettings.Quiet"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageImportSettings.SourceFile"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageImportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageImportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageImportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageImportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageImportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageImportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageImportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageImportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageImportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageImportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageImportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageImport(SqlPackageImportSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageImportSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage Import action imports the schema and table data from a BACPAC file (.bacpac) into a new or empty database in SQL Server or Azure SQL Database. At the time of the import operation to an existing database the target database cannot contain any user-defined schema objects. Alternatively, a new database can be created by the import action when the authenticated user has create database permissions.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-import">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageImportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageImportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageImportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageImportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageImportSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageImportSettings.ModelFilePath"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageImportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageImportSettings.Quiet"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageImportSettings.SourceFile"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageImportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageImportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageImportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageImportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageImportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageImportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageImportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageImportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageImportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageImportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageImportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageImport(Configure<SqlPackageImportSettings> configurator)
    {
        return SqlPackageImport(configurator(new SqlPackageImportSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage Import action imports the schema and table data from a BACPAC file (.bacpac) into a new or empty database in SQL Server or Azure SQL Database. At the time of the import operation to an existing database the target database cannot contain any user-defined schema objects. Alternatively, a new database can be created by the import action when the authenticated user has create database permissions.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-import">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageImportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageImportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageImportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageImportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageImportSettings.MaxParallelism"/></li>
    ///     <li><c>/ModelFilePath</c> via <see cref="SqlPackageImportSettings.ModelFilePath"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageImportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageImportSettings.Quiet"/></li>
    ///     <li><c>/SourceFile</c> via <see cref="SqlPackageImportSettings.SourceFile"/></li>
    ///     <li><c>/TargetConnectionString</c> via <see cref="SqlPackageImportSettings.TargetConnectionString"/></li>
    ///     <li><c>/TargetDatabaseName</c> via <see cref="SqlPackageImportSettings.TargetDatabaseName"/></li>
    ///     <li><c>/TargetEncryptConnection</c> via <see cref="SqlPackageImportSettings.TargetEncryptConnection"/></li>
    ///     <li><c>/TargetHostNameInCertificate</c> via <see cref="SqlPackageImportSettings.TargetHostNameInCertificate"/></li>
    ///     <li><c>/TargetPassword</c> via <see cref="SqlPackageImportSettings.TargetPassword"/></li>
    ///     <li><c>/TargetServerName</c> via <see cref="SqlPackageImportSettings.TargetServerName"/></li>
    ///     <li><c>/TargetTimeout</c> via <see cref="SqlPackageImportSettings.TargetTimeout"/></li>
    ///     <li><c>/TargetTrustServerCertificate</c> via <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></li>
    ///     <li><c>/TargetUser</c> via <see cref="SqlPackageImportSettings.TargetUser"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageImportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageImportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageImportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageImportSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageImport(CombinatorialConfigure<SqlPackageImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageImport, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage Export action exports a connected database to a BACPAC file (.bacpac). By default, data for all tables will be included in the .bacpac file. Optionally, you can specify only a subset of tables for which to export data. Validation for the Export action ensures Azure SQL Database compatibility for the complete targeted database even if a subset of tables is specified for the export.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-export">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExportSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExportSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExportSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageExport(SqlPackageExportSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageExportSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage Export action exports a connected database to a BACPAC file (.bacpac). By default, data for all tables will be included in the .bacpac file. Optionally, you can specify only a subset of tables for which to export data. Validation for the Export action ensures Azure SQL Database compatibility for the complete targeted database even if a subset of tables is specified for the export.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-export">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExportSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExportSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExportSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageExport(Configure<SqlPackageExportSettings> configurator)
    {
        return SqlPackageExport(configurator(new SqlPackageExportSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage Export action exports a connected database to a BACPAC file (.bacpac). By default, data for all tables will be included in the .bacpac file. Optionally, you can specify only a subset of tables for which to export data. Validation for the Export action ensures Azure SQL Database compatibility for the complete targeted database even if a subset of tables is specified for the export.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-export">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExportSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExportSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExportSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExportSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExportSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExportSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExportSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExportSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExportSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExportSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExportSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExportSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExportSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExportSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExportSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExportSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExportSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExportSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExportSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExportSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageExportSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageExport(CombinatorialConfigure<SqlPackageExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageExport, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
    /// <summary>
    ///   <p>The SqlPackage Extract action creates a schema of a connected database in a DACPAC file (.dacpac). By default, data is not included in the .dacpac file. To include data, utilize the Export action or use the Extract properties ExtractAllTableData/TableData.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-extract">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExtractSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExtractSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExtractSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExtractSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExtractSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExtractSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExtractSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExtractSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExtractSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExtractSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExtractSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExtractSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExtractSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExtractSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExtractSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExtractSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExtractSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExtractSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExtractSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageExtract(SqlPackageExtractSettings toolSettings = null)
    {
        toolSettings = toolSettings ?? new SqlPackageExtractSettings();
        using var process = ProcessTasks.StartProcess(toolSettings);
        toolSettings.ProcessExitHandler.Invoke(toolSettings, process.AssertWaitForExit());
        return process.Output;
    }
    /// <summary>
    ///   <p>The SqlPackage Extract action creates a schema of a connected database in a DACPAC file (.dacpac). By default, data is not included in the .dacpac file. To include data, utilize the Export action or use the Extract properties ExtractAllTableData/TableData.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-extract">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExtractSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExtractSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExtractSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExtractSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExtractSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExtractSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExtractSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExtractSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExtractSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExtractSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExtractSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExtractSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExtractSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExtractSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExtractSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExtractSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExtractSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExtractSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExtractSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IReadOnlyCollection<Output> SqlPackageExtract(Configure<SqlPackageExtractSettings> configurator)
    {
        return SqlPackageExtract(configurator(new SqlPackageExtractSettings()));
    }
    /// <summary>
    ///   <p>The SqlPackage Extract action creates a schema of a connected database in a DACPAC file (.dacpac). By default, data is not included in the .dacpac file. To include data, utilize the Export action or use the Extract properties ExtractAllTableData/TableData.</p>
    ///   <p>For more details, visit the <a href="https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-extract">official website</a>.</p>
    /// </summary>
    /// <remarks>
    ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
    ///   <ul>
    ///     <li><c>/AccessToken</c> via <see cref="SqlPackageExtractSettings.AccessToken"/></li>
    ///     <li><c>/AzureCloudConfig</c> via <see cref="SqlPackageExtractSettings.AzureCloudConfig"/></li>
    ///     <li><c>/Diagnostics</c> via <see cref="SqlPackageExtractSettings.Diagnostics"/></li>
    ///     <li><c>/DiagnosticsFile</c> via <see cref="SqlPackageExtractSettings.DiagnosticsFile"/></li>
    ///     <li><c>/MaxParallelism</c> via <see cref="SqlPackageExtractSettings.MaxParallelism"/></li>
    ///     <li><c>/OverwriteFiles</c> via <see cref="SqlPackageExtractSettings.OverwriteFiles"/></li>
    ///     <li><c>/p</c> via <see cref="SqlPackageExtractSettings.Properties"/></li>
    ///     <li><c>/Quiet</c> via <see cref="SqlPackageExtractSettings.Quiet"/></li>
    ///     <li><c>/SourceConnectionString</c> via <see cref="SqlPackageExtractSettings.SourceConnectionString"/></li>
    ///     <li><c>/SourceDatabaseName</c> via <see cref="SqlPackageExtractSettings.SourceDatabaseName"/></li>
    ///     <li><c>/SourceEncryptConnection</c> via <see cref="SqlPackageExtractSettings.SourceEncryptConnection"/></li>
    ///     <li><c>/SourceHostNameInCertificate</c> via <see cref="SqlPackageExtractSettings.SourceHostNameInCertificate"/></li>
    ///     <li><c>/SourcePassword</c> via <see cref="SqlPackageExtractSettings.SourcePassword"/></li>
    ///     <li><c>/SourceServerName</c> via <see cref="SqlPackageExtractSettings.SourceServerName"/></li>
    ///     <li><c>/SourceTimeout</c> via <see cref="SqlPackageExtractSettings.SourceTimeout"/></li>
    ///     <li><c>/SourceTrustServerCertificate</c> via <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></li>
    ///     <li><c>/SourceUser</c> via <see cref="SqlPackageExtractSettings.SourceUser"/></li>
    ///     <li><c>/TargetFile</c> via <see cref="SqlPackageExtractSettings.TargetFile"/></li>
    ///     <li><c>/TenantId</c> via <see cref="SqlPackageExtractSettings.TenantId"/></li>
    ///     <li><c>/ThreadMaxStackSize</c> via <see cref="SqlPackageExtractSettings.ThreadMaxStackSize"/></li>
    ///     <li><c>/UniversalAuthentication</c> via <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></li>
    ///   </ul>
    /// </remarks>
    public static IEnumerable<(SqlPackageExtractSettings Settings, IReadOnlyCollection<Output> Output)> SqlPackageExtract(CombinatorialConfigure<SqlPackageExtractSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
    {
        return configurator.Invoke(SqlPackageExtract, SqlPackageLogger, degreeOfParallelism, completeOnFailure);
    }
}
#region SqlPackageVersionSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageVersionSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Version");
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackagePublishSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackagePublishSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token-based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .
    /// </summary>
    public virtual string AzureCloudConfig { get; internal set; }
    /// <summary>
    ///   Specifies what authentication method is used for accessing Azure KeyVault if a publish operation includes modifications to an encrypted table/column.
    /// </summary>
    public virtual AzureKeyVaultAuthMethod AzureKeyVaultAuthMethod { get; internal set; }
    /// <summary>
    ///   Specifies the Client ID to be used in authenticating against Azure KeyVault, when necessary
    /// </summary>
    public virtual string ClientId { get; internal set; }
    /// <summary>
    ///   Specifies an optional file path to output the deployment report xml file.
    /// </summary>
    public virtual string DeployReportPath { get; internal set; }
    /// <summary>
    ///   Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.
    /// </summary>
    public virtual string DeployScriptPath { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.
    /// </summary>
    public virtual string ModelFilePath { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.
    /// </summary>
    public virtual string Profile { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies the additional directories to search for .dacpac references.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> ReferencePaths => ReferencePathsInternal.AsReadOnly();
    internal Dictionary<string, object> ReferencePathsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies the Client Secret to be used in authenticating against Azure KeyVault, when necessary
    /// </summary>
    public virtual string Secret { get; internal set; }
    /// <summary>
    ///   Specifies a source file to be used as the source of action instead of a database from local storage. If this name is used, no other source name shall be valid.
    /// </summary>
    public virtual string SourceFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is specified, it shall be used exclusively of all other source names.
    /// </summary>
    public virtual string SourceConnectionString { get; internal set; }
    /// <summary>
    ///   Defines the name of the source database.
    /// </summary>
    public virtual string SourceDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the source database connection. Default value is True.
    /// </summary>
    public virtual bool? SourceEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string SourceHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the source database.
    /// </summary>
    public virtual string SourcePassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the source database.
    /// </summary>
    public virtual string SourceServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the source database in seconds.
    /// </summary>
    public virtual int? SourceTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? SourceTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.
    /// </summary>
    public virtual string SourceUser { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is specified, it shall be used exclusively of all other target names.
    /// </summary>
    public virtual string TargetConnectionString { get; internal set; }
    /// <summary>
    ///   Specifies an override for the name of the database that is the target of SqlPackage Action.
    /// </summary>
    public virtual string TargetDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the target database connection. Default value is True.
    /// </summary>
    public virtual bool? TargetEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string TargetHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the target database.
    /// </summary>
    public virtual string TargetPassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the target database.
    /// </summary>
    public virtual string TargetServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.
    /// </summary>
    public virtual int? TargetTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? TargetTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.
    /// </summary>
    public virtual string TargetUser { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.
    /// </summary>
    public virtual int? ThreadMaxStackSize { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
    internal Dictionary<string, object> VariablesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:Publish")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/AzureCloudConfig:{value}", AzureCloudConfig)
          .Add("/AzureKeyVaultAuthMethod:{value}", AzureKeyVaultAuthMethod)
          .Add("/ClientId:{value}", ClientId)
          .Add("/DeployReportPath:{value}", DeployReportPath)
          .Add("/DeployScriptPath:{value}", DeployScriptPath)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/ModelFilePath:{value}", ModelFilePath)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/Profile:{value}", Profile)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/rp:{value}", ReferencePaths, "{key}={value}")
          .Add("/Secret:{value}", Secret)
          .Add("/SourceFile:{value}", SourceFile)
          .Add("/SourceConnectionString:{value}", SourceConnectionString)
          .Add("/SourceDatabaseName:{value}", SourceDatabaseName)
          .Add("/SourceEncryptConnection:{value}", SourceEncryptConnection)
          .Add("/SourceHostNameInCertificate:{value}", SourceHostNameInCertificate)
          .Add("/SourcePassword:{value}", SourcePassword)
          .Add("/SourceServerName:{value}", SourceServerName)
          .Add("/SourceTimeout:{value}", SourceTimeout)
          .Add("/SourceTrustServerCertificate:{value}", SourceTrustServerCertificate)
          .Add("/SourceUser:{value}", SourceUser)
          .Add("/TargetConnectionString:{value}", TargetConnectionString)
          .Add("/TargetDatabaseName:{value}", TargetDatabaseName)
          .Add("/TargetEncryptConnection:{value}", TargetEncryptConnection)
          .Add("/TargetHostNameInCertificate:{value}", TargetHostNameInCertificate)
          .Add("/TargetPassword:{value}", TargetPassword)
          .Add("/TargetServerName:{value}", TargetServerName)
          .Add("/TargetTimeout:{value}", TargetTimeout)
          .Add("/TargetTrustServerCertificate:{value}", TargetTrustServerCertificate)
          .Add("/TargetUser:{value}", TargetUser)
          .Add("/TenantId:{value}", TenantId)
          .Add("/ThreadMaxStackSize:{value}", ThreadMaxStackSize)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication)
          .Add("/v:{value}", Variables, "{key}={value}");
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageDeployReportSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageDeployReportSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies the file path where the output files are generated.
    /// </summary>
    public virtual string OutputPath { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.
    /// </summary>
    public virtual string Profile { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies a source file to be used as the source of action instead of a database. If this name is ed, no other source name sha beva.
    /// </summary>
    public virtual string SourceFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is ecified, it shall be used exclusively of all other sourcen.
    /// </summary>
    public virtual string SourceConnectionString { get; internal set; }
    /// <summary>
    ///   Defines the name of the source database.
    /// </summary>
    public virtual string SourceDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the source database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType SourceEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string SourceHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the source database.
    /// </summary>
    public virtual string SourcePassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the source database.
    /// </summary>
    public virtual string SourceServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the source database in seconds.
    /// </summary>
    public virtual int? SourceTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? SourceTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.
    /// </summary>
    public virtual string SourceUser { get; internal set; }
    /// <summary>
    ///   Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this name is ed, no other target name sha be valid. This name sha be invalid for actions that only support databasetarg.
    /// </summary>
    public virtual string TargetFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is ecified, it shall be used exclusively of all other targetn 
    /// </summary>
    public virtual string TargetConnectionString { get; internal set; }
    /// <summary>
    ///   Specifies an override for the name of the database that is the target of SqlPackage Action.
    /// </summary>
    public virtual string TargetDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the target database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType TargetEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string TargetHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the target database.
    /// </summary>
    public virtual string TargetPassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the target database.
    /// </summary>
    public virtual string TargetServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.
    /// </summary>
    public virtual int? TargetTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? TargetTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.
    /// </summary>
    public virtual string TargetUser { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is itted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfaauthenticati.
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
    internal Dictionary<string, object> VariablesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:DeployReport")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/OutputPath:{value}", OutputPath)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/Profile:{value}", Profile)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/SourceFile:{value}", SourceFile)
          .Add("/SourceConnectionString:{value}", SourceConnectionString)
          .Add("/SourceDatabaseName:{value}", SourceDatabaseName)
          .Add("/SourceEncryptConnection:{value}", SourceEncryptConnection)
          .Add("/SourceHostNameInCertificate:{value}", SourceHostNameInCertificate)
          .Add("/SourcePassword:{value}", SourcePassword)
          .Add("/SourceServerName:{value}", SourceServerName)
          .Add("/SourceTimeout:{value}", SourceTimeout)
          .Add("/SourceTrustServerCertificate:{value}", SourceTrustServerCertificate)
          .Add("/SourceUser:{value}", SourceUser)
          .Add("/TargetFile:{value}", TargetFile)
          .Add("/TargetConnectionString:{value}", TargetConnectionString)
          .Add("/TargetDatabaseName:{value}", TargetDatabaseName)
          .Add("/TargetEncryptConnection:{value}", TargetEncryptConnection)
          .Add("/TargetHostNameInCertificate:{value}", TargetHostNameInCertificate)
          .Add("/TargetPassword:{value}", TargetPassword)
          .Add("/TargetServerName:{value}", TargetServerName)
          .Add("/TargetTimeout:{value}", TargetTimeout)
          .Add("/TargetTrustServerCertificate:{value}", TargetTrustServerCertificate)
          .Add("/TargetUser:{value}", TargetUser)
          .Add("/TenantId:{value}", TenantId)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication)
          .Add("/v:{value}", Variables, "{key}={value}");
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageDriftReportSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageDriftReportSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies the file path where the output files are generated.
    /// </summary>
    public virtual string OutputPath { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies a valid SQL Server/Azure connection string to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.
    /// </summary>
    public virtual string TargetConnectionString { get; internal set; }
    /// <summary>
    ///   Specifies an override for the name of the database that is the target of SqlPackage Action.
    /// </summary>
    public virtual string TargetDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the target database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType TargetEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string TargetHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the target database.
    /// </summary>
    public virtual string TargetPassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the target database.
    /// </summary>
    public virtual string TargetServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.
    /// </summary>
    public virtual int? TargetTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? TargetTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.
    /// </summary>
    public virtual string TargetUser { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:DriftReport")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/OutputPath:{value}", OutputPath)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/Quiet:{value}", Quiet)
          .Add("/TargetConnectionString:{value}", TargetConnectionString)
          .Add("/TargetDatabaseName:{value}", TargetDatabaseName)
          .Add("/TargetEncryptConnection:{value}", TargetEncryptConnection)
          .Add("/TargetHostNameInCertificate:{value}", TargetHostNameInCertificate)
          .Add("/TargetPassword:{value}", TargetPassword)
          .Add("/TargetServerName:{value}", TargetServerName)
          .Add("/TargetTimeout:{value}", TargetTimeout)
          .Add("/TargetTrustServerCertificate:{value}", TargetTrustServerCertificate)
          .Add("/TargetUser:{value}", TargetUser)
          .Add("/TenantId:{value}", TenantId)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication);
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageScriptSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageScriptSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .
    /// </summary>
    public virtual string AzureCloudConfig { get; internal set; }
    /// <summary>
    ///   Specifies an optional file path to output the deployment report xml file.
    /// </summary>
    public virtual string DeployReportPath { get; internal set; }
    /// <summary>
    ///   Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.
    /// </summary>
    public virtual string DeployScriptPath { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.
    /// </summary>
    public virtual string ModelFilePath { get; internal set; }
    /// <summary>
    ///   Specifies the file path where the output files are generated.
    /// </summary>
    public virtual string OutputPath { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.
    /// </summary>
    public virtual string Profile { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies the additional directories to search for .dacpac references.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> ReferencePaths => ReferencePathsInternal.AsReadOnly();
    internal Dictionary<string, object> ReferencePathsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies a source file to be used as the source of action. If this parameter is used, no other source parameter shall be valid.
    /// </summary>
    public virtual string SourceFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.
    /// </summary>
    public virtual string SourceConnectionString { get; internal set; }
    /// <summary>
    ///   Defines the name of the source database.
    /// </summary>
    public virtual string SourceDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the source database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType SourceEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string SourceHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the source database.
    /// </summary>
    public virtual string SourcePassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the source database.
    /// </summary>
    public virtual string SourceServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the source database in seconds.
    /// </summary>
    public virtual int? SourceTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? SourceTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.
    /// </summary>
    public virtual string SourceUser { get; internal set; }
    /// <summary>
    ///   Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.
    /// </summary>
    public virtual string TargetFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.
    /// </summary>
    public virtual string TargetConnectionString { get; internal set; }
    /// <summary>
    ///   Specifies an override for the name of the database that is the target of SqlPackage Action.
    /// </summary>
    public virtual string TargetDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the target database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType TargetEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string TargetHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the target database.
    /// </summary>
    public virtual string TargetPassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the target database.
    /// </summary>
    public virtual string TargetServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.
    /// </summary>
    public virtual int? TargetTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? TargetTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.
    /// </summary>
    public virtual string TargetUser { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.
    /// </summary>
    public virtual int? ThreadMaxStackSize { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
    internal Dictionary<string, object> VariablesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:Script")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/AzureCloudConfig:{value}", AzureCloudConfig)
          .Add("/DeployReportPath:{value}", DeployReportPath)
          .Add("/DeployScriptPath:{value}", DeployScriptPath)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/ModelFilePath:{value}", ModelFilePath)
          .Add("/OutputPath:{value}", OutputPath)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/Profile:{value}", Profile)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/rp:{value}", ReferencePaths, "{key}={value}")
          .Add("/SourceFile:{value}", SourceFile)
          .Add("/SourceConnectionString:{value}", SourceConnectionString)
          .Add("/SourceDatabaseName:{value}", SourceDatabaseName)
          .Add("/SourceEncryptConnection:{value}", SourceEncryptConnection)
          .Add("/SourceHostNameInCertificate:{value}", SourceHostNameInCertificate)
          .Add("/SourcePassword:{value}", SourcePassword)
          .Add("/SourceServerName:{value}", SourceServerName)
          .Add("/SourceTimeout:{value}", SourceTimeout)
          .Add("/SourceTrustServerCertificate:{value}", SourceTrustServerCertificate)
          .Add("/SourceUser:{value}", SourceUser)
          .Add("/TargetFile:{value}", TargetFile)
          .Add("/TargetConnectionString:{value}", TargetConnectionString)
          .Add("/TargetDatabaseName:{value}", TargetDatabaseName)
          .Add("/TargetEncryptConnection:{value}", TargetEncryptConnection)
          .Add("/TargetHostNameInCertificate:{value}", TargetHostNameInCertificate)
          .Add("/TargetPassword:{value}", TargetPassword)
          .Add("/TargetServerName:{value}", TargetServerName)
          .Add("/TargetTimeout:{value}", TargetTimeout)
          .Add("/TargetTrustServerCertificate:{value}", TargetTrustServerCertificate)
          .Add("/TargetUser:{value}", TargetUser)
          .Add("/TenantId:{value}", TenantId)
          .Add("/ThreadMaxStackSize:{value}", ThreadMaxStackSize)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication)
          .Add("/v:{value}", Variables, "{key}={value}");
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageImportSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageImportSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token-based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .
    /// </summary>
    public virtual string AzureCloudConfig { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.
    /// </summary>
    public virtual string ModelFilePath { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies a source file to be used as the source of action from local storage. If this parameter is used, no other source parameter shall be valid.
    /// </summary>
    public virtual string SourceFile { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.
    /// </summary>
    public virtual string TargetConnectionString { get; internal set; }
    /// <summary>
    ///   Specifies an override for the name of the database that is the target of SqlPackage Action.
    /// </summary>
    public virtual string TargetDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the target database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType TargetEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string TargetHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the target database.
    /// </summary>
    public virtual string TargetPassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the target database.
    /// </summary>
    public virtual string TargetServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.
    /// </summary>
    public virtual int? TargetTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? TargetTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.
    /// </summary>
    public virtual string TargetUser { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.
    /// </summary>
    public virtual int? ThreadMaxStackSize { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:Import")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/AzureCloudConfig:{value}", AzureCloudConfig)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/ModelFilePath:{value}", ModelFilePath)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/SourceFile:{value}", SourceFile)
          .Add("/TargetConnectionString:{value}", TargetConnectionString)
          .Add("/TargetDatabaseName:{value}", TargetDatabaseName)
          .Add("/TargetEncryptConnection:{value}", TargetEncryptConnection)
          .Add("/TargetHostNameInCertificate:{value}", TargetHostNameInCertificate)
          .Add("/TargetPassword:{value}", TargetPassword)
          .Add("/TargetServerName:{value}", TargetServerName)
          .Add("/TargetTimeout:{value}", TargetTimeout)
          .Add("/TargetTrustServerCertificate:{value}", TargetTrustServerCertificate)
          .Add("/TargetUser:{value}", TargetUser)
          .Add("/TenantId:{value}", TenantId)
          .Add("/ThreadMaxStackSize:{value}", ThreadMaxStackSize)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication);
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageExportSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageExportSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token-based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .
    /// </summary>
    public virtual string AzureCloudConfig { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.
    /// </summary>
    public virtual string SourceConnectionString { get; internal set; }
    /// <summary>
    ///   Defines the name of the source database.
    /// </summary>
    public virtual string SourceDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the source database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType SourceEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string SourceHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the source database.
    /// </summary>
    public virtual string SourcePassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the source database.
    /// </summary>
    public virtual string SourceServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the source database in seconds.
    /// </summary>
    public virtual int? SourceTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? SourceTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.
    /// </summary>
    public virtual string SourceUser { get; internal set; }
    /// <summary>
    ///   Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.
    /// </summary>
    public virtual string TargetFile { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.
    /// </summary>
    public virtual int? ThreadMaxStackSize { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:Export")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/AzureCloudConfig:{value}", AzureCloudConfig)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/SourceConnectionString:{value}", SourceConnectionString)
          .Add("/SourceDatabaseName:{value}", SourceDatabaseName)
          .Add("/SourceEncryptConnection:{value}", SourceEncryptConnection)
          .Add("/SourceHostNameInCertificate:{value}", SourceHostNameInCertificate)
          .Add("/SourcePassword:{value}", SourcePassword)
          .Add("/SourceServerName:{value}", SourceServerName)
          .Add("/SourceTimeout:{value}", SourceTimeout)
          .Add("/SourceTrustServerCertificate:{value}", SourceTrustServerCertificate)
          .Add("/SourceUser:{value}", SourceUser)
          .Add("/TargetFile:{value}", TargetFile)
          .Add("/TenantId:{value}", TenantId)
          .Add("/ThreadMaxStackSize:{value}", ThreadMaxStackSize)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication);
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageExtractSettings
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Serializable]
public partial class SqlPackageExtractSettings : ToolSettings
{
    /// <summary>
    ///   Path to the SqlPackage executable.
    /// </summary>
    public override string ProcessToolPath => base.ProcessToolPath ?? SqlPackageTasks.SqlPackagePath;
    public override Action<OutputType, string> ProcessLogger => base.ProcessLogger ?? SqlPackageTasks.SqlPackageLogger;
    public override Action<ToolSettings, IProcess> ProcessExitHandler => base.ProcessExitHandler ?? SqlPackageTasks.SqlPackageExitHandler;
    /// <summary>
    ///   Specifies the token based authentication access token to use when connect to the target database.
    /// </summary>
    public virtual string AccessToken { get; internal set; }
    /// <summary>
    ///   Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .
    /// </summary>
    public virtual string AzureCloudConfig { get; internal set; }
    /// <summary>
    ///   Specifies whether diagnostic logging is output to the console. Defaults to False.
    /// </summary>
    public virtual bool? Diagnostics { get; internal set; }
    /// <summary>
    ///   Specifies a file to store diagnostic logs.
    /// </summary>
    public virtual string DiagnosticsFile { get; internal set; }
    /// <summary>
    ///   Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.
    /// </summary>
    public virtual int? MaxParallelism { get; internal set; }
    /// <summary>
    ///   Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.
    /// </summary>
    public virtual bool? OverwriteFiles { get; internal set; }
    /// <summary>
    ///   Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.
    /// </summary>
    public virtual IReadOnlyDictionary<string, object> Properties => PropertiesInternal.AsReadOnly();
    internal Dictionary<string, object> PropertiesInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
    /// <summary>
    ///   Specifies whether detailed feedback is suppressed. Defaults to False.
    /// </summary>
    public virtual bool? Quiet { get; internal set; }
    /// <summary>
    ///   Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.
    /// </summary>
    public virtual string SourceConnectionString { get; internal set; }
    /// <summary>
    ///   Defines the name of the source database.
    /// </summary>
    public virtual string SourceDatabaseName { get; internal set; }
    /// <summary>
    ///   Specifies if SQL encryption should be used for the source database connection. Default value is True.
    /// </summary>
    public virtual EncryptionType SourceEncryptConnection { get; internal set; }
    /// <summary>
    ///   Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.
    /// </summary>
    public virtual string SourceHostNameInCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the password to use to access the source database.
    /// </summary>
    public virtual string SourcePassword { get; internal set; }
    /// <summary>
    ///   Defines the name of the server hosting the source database.
    /// </summary>
    public virtual string SourceServerName { get; internal set; }
    /// <summary>
    ///   Specifies the timeout for establishing a connection to the source database in seconds.
    /// </summary>
    public virtual int? SourceTimeout { get; internal set; }
    /// <summary>
    ///   Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.
    /// </summary>
    public virtual bool? SourceTrustServerCertificate { get; internal set; }
    /// <summary>
    ///   For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.
    /// </summary>
    public virtual string SourceUser { get; internal set; }
    /// <summary>
    ///   Specifies a target file (that is, a .dacpac file) in local storage to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.
    /// </summary>
    public virtual string TargetFile { get; internal set; }
    /// <summary>
    ///   Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual string TenantId { get; internal set; }
    /// <summary>
    ///   Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.
    /// </summary>
    public virtual int? ThreadMaxStackSize { get; internal set; }
    /// <summary>
    ///   Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).
    /// </summary>
    public virtual bool? UniversalAuthentication { get; internal set; }
    protected override Arguments ConfigureProcessArguments(Arguments arguments)
    {
        arguments
          .Add("/Action:Extract")
          .Add("/AccessToken:{value}", AccessToken)
          .Add("/AzureCloudConfig:{value}", AzureCloudConfig)
          .Add("/Diagnostics:{value}", Diagnostics)
          .Add("/DiagnosticsFile:{value}", DiagnosticsFile)
          .Add("/MaxParallelism:{value}", MaxParallelism)
          .Add("/OverwriteFiles:{value}", OverwriteFiles)
          .Add("/p:{value}", Properties, "{key}={value}")
          .Add("/Quiet:{value}", Quiet)
          .Add("/SourceConnectionString:{value}", SourceConnectionString)
          .Add("/SourceDatabaseName:{value}", SourceDatabaseName)
          .Add("/SourceEncryptConnection:{value}", SourceEncryptConnection)
          .Add("/SourceHostNameInCertificate:{value}", SourceHostNameInCertificate)
          .Add("/SourcePassword:{value}", SourcePassword)
          .Add("/SourceServerName:{value}", SourceServerName)
          .Add("/SourceTimeout:{value}", SourceTimeout)
          .Add("/SourceTrustServerCertificate:{value}", SourceTrustServerCertificate)
          .Add("/SourceUser:{value}", SourceUser)
          .Add("/TargetFile:{value}", TargetFile)
          .Add("/TenantId:{value}", TenantId)
          .Add("/ThreadMaxStackSize:{value}", ThreadMaxStackSize)
          .Add("/UniversalAuthentication:{value}", UniversalAuthentication);
        return base.ConfigureProcessArguments(arguments);
    }
}
#endregion
#region SqlPackageVersionSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageVersionSettingsExtensions
{
}
#endregion
#region SqlPackagePublishSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackagePublishSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region AzureCloudConfig
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T SetAzureCloudConfig<T>(this T toolSettings, string azureCloudConfig) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = azureCloudConfig;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T ResetAzureCloudConfig<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = null;
        return toolSettings;
    }
    #endregion
    #region AzureKeyVaultAuthMethod
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.AzureKeyVaultAuthMethod"/></em></p>
    ///   <p>Specifies what authentication method is used for accessing Azure KeyVault if a publish operation includes modifications to an encrypted table/column.</p>
    /// </summary>
    [Pure]
    public static T SetAzureKeyVaultAuthMethod<T>(this T toolSettings, AzureKeyVaultAuthMethod azureKeyVaultAuthMethod) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureKeyVaultAuthMethod = azureKeyVaultAuthMethod;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.AzureKeyVaultAuthMethod"/></em></p>
    ///   <p>Specifies what authentication method is used for accessing Azure KeyVault if a publish operation includes modifications to an encrypted table/column.</p>
    /// </summary>
    [Pure]
    public static T ResetAzureKeyVaultAuthMethod<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureKeyVaultAuthMethod = null;
        return toolSettings;
    }
    #endregion
    #region ClientId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.ClientId"/></em></p>
    ///   <p>Specifies the Client ID to be used in authenticating against Azure KeyVault, when necessary</p>
    /// </summary>
    [Pure]
    public static T SetClientId<T>(this T toolSettings, string clientId) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ClientId = clientId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.ClientId"/></em></p>
    ///   <p>Specifies the Client ID to be used in authenticating against Azure KeyVault, when necessary</p>
    /// </summary>
    [Pure]
    public static T ResetClientId<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ClientId = null;
        return toolSettings;
    }
    #endregion
    #region DeployReportPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.DeployReportPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment report xml file.</p>
    /// </summary>
    [Pure]
    public static T SetDeployReportPath<T>(this T toolSettings, string deployReportPath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployReportPath = deployReportPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.DeployReportPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment report xml file.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployReportPath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployReportPath = null;
        return toolSettings;
    }
    #endregion
    #region DeployScriptPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.DeployScriptPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.</p>
    /// </summary>
    [Pure]
    public static T SetDeployScriptPath<T>(this T toolSettings, string deployScriptPath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployScriptPath = deployScriptPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.DeployScriptPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployScriptPath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployScriptPath = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region ModelFilePath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T SetModelFilePath<T>(this T toolSettings, string modelFilePath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = modelFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T ResetModelFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Profile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T SetProfile<T>(this T toolSettings, string profile) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = profile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T ResetProfile<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = null;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region AdditionalDeploymentContributorArguments
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in existing <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorArguments<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorArguments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributorPaths
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in existing <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorPaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributors
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in existing <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributors<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    #endregion
    #region AllowDropBlockingAssemblies
    /// <summary>
    ///   <p><em>Sets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T SetAllowDropBlockingAssemblies<T>(this T toolSettings, bool? allowDropBlockingAssemblies) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = allowDropBlockingAssemblies;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowDropBlockingAssemblies");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowDropBlockingAssemblies");
        return toolSettings;
    }
    #endregion
    #region AllowExternalLanguagePaths
    /// <summary>
    ///   <p><em>Sets <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external language statements.</p>
    /// </summary>
    [Pure]
    public static T SetAllowExternalLanguagePaths<T>(this T toolSettings, bool? allowExternalLanguagePaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = allowExternalLanguagePaths;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external language statements.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowExternalLanguagePaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowExternalLanguagePaths");
        return toolSettings;
    }
    #endregion
    #region AllowExternalLibraryPaths
    /// <summary>
    ///   <p><em>Sets <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external library statements.</p>
    /// </summary>
    [Pure]
    public static T SetAllowExternalLibraryPaths<T>(this T toolSettings, bool? allowExternalLibraryPaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = allowExternalLibraryPaths;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external library statements.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowExternalLibraryPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowExternalLibraryPaths");
        return toolSettings;
    }
    #endregion
    #region AllowIncompatiblePlatform
    /// <summary>
    ///   <p><em>Sets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T SetAllowIncompatiblePlatform<T>(this T toolSettings, bool? allowIncompatiblePlatform) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = allowIncompatiblePlatform;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowIncompatiblePlatform");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowIncompatiblePlatform");
        return toolSettings;
    }
    #endregion
    #region AllowUnsafeRowLevelSecurityDataMovement
    /// <summary>
    ///   <p><em>Sets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T SetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings, bool? allowUnsafeRowLevelSecurityDataMovement) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = allowUnsafeRowLevelSecurityDataMovement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    #endregion
    #region AzureSharedAccessSignatureToken
    /// <summary>
    ///   <p><em>Sets <c>AzureSharedAccessSignatureToken</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure shared access signature (SAS) token. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureSharedAccessSignatureToken<T>(this T toolSettings, string azureSharedAccessSignatureToken) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureSharedAccessSignatureToken"] = azureSharedAccessSignatureToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureSharedAccessSignatureToken</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure shared access signature (SAS) token. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureSharedAccessSignatureToken<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureSharedAccessSignatureToken");
        return toolSettings;
    }
    #endregion
    #region AzureStorageBlobEndpoint
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageBlobEndpoint</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage endpoint, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageBlobEndpoint<T>(this T toolSettings, string azureStorageBlobEndpoint) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageBlobEndpoint"] = azureStorageBlobEndpoint;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageBlobEndpoint</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage endpoint, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageBlobEndpoint<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageBlobEndpoint");
        return toolSettings;
    }
    #endregion
    #region AzureStorageContainer
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageContainer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage container, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageContainer<T>(this T toolSettings, string azureStorageContainer) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageContainer"] = azureStorageContainer;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageContainer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage container, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageContainer<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageContainer");
        return toolSettings;
    }
    #endregion
    #region AzureStorageKey
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageKey</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure storage account key, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageKey<T>(this T toolSettings, string azureStorageKey) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageKey"] = azureStorageKey;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageKey</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Azure storage account key, see [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageKey<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageKey");
        return toolSettings;
    }
    #endregion
    #region AzureStorageRootPath
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageRootPath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Storage root path within the container. Without this property, the path defaults to `servername/databasename/timestamp/`. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageRootPath<T>(this T toolSettings, string azureStorageRootPath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageRootPath"] = azureStorageRootPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageRootPath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Storage root path within the container. Without this property, the path defaults to `servername/databasename/timestamp/`. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#publish-import-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageRootPath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageRootPath");
        return toolSettings;
    }
    #endregion
    #region BackupDatabaseBeforeChanges
    /// <summary>
    ///   <p><em>Sets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes. This property is not applicable to Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T SetBackupDatabaseBeforeChanges<T>(this T toolSettings, bool? backupDatabaseBeforeChanges) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = backupDatabaseBeforeChanges;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes. This property is not applicable to Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T ResetBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    #endregion
    #region BlockOnPossibleDataLoss
    /// <summary>
    ///   <p><em>Sets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T SetBlockOnPossibleDataLoss<T>(this T toolSettings, bool? blockOnPossibleDataLoss) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = blockOnPossibleDataLoss;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockOnPossibleDataLoss");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockOnPossibleDataLoss");
        return toolSettings;
    }
    #endregion
    #region BlockWhenDriftDetected
    /// <summary>
    ///   <p><em>Sets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T SetBlockWhenDriftDetected<T>(this T toolSettings, bool? blockWhenDriftDetected) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = blockWhenDriftDetected;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockWhenDriftDetected");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockWhenDriftDetected</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockWhenDriftDetected");
        return toolSettings;
    }
    #endregion
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region CommentOutSetVarDeclarations
    /// <summary>
    ///   <p><em>Sets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T SetCommentOutSetVarDeclarations<T>(this T toolSettings, bool? commentOutSetVarDeclarations) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = commentOutSetVarDeclarations;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T ResetCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommentOutSetVarDeclarations");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CommentOutSetVarDeclarations");
        return toolSettings;
    }
    #endregion
    #region CompareUsingTargetCollation
    /// <summary>
    ///   <p><em>Sets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T SetCompareUsingTargetCollation<T>(this T toolSettings, bool? compareUsingTargetCollation) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = compareUsingTargetCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T ResetCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CompareUsingTargetCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CompareUsingTargetCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CompareUsingTargetCollation");
        return toolSettings;
    }
    #endregion
    #region CreateNewDatabase
    /// <summary>
    ///   <p><em>Sets <c>CreateNewDatabase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetCreateNewDatabase<T>(this T toolSettings, bool? createNewDatabase) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = createNewDatabase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CreateNewDatabase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetCreateNewDatabase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CreateNewDatabase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CreateNewDatabase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CreateNewDatabase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CreateNewDatabase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCreateNewDatabase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CreateNewDatabase");
        return toolSettings;
    }
    #endregion
    #region DatabaseEdition
    /// <summary>
    ///   <p><em>Sets <c>DatabaseEdition</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseEdition<T>(this T toolSettings, DatabaseEdition databaseEdition) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseEdition"] = databaseEdition;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseEdition</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseEdition<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseEdition");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region DatabaseMaximumSize
    /// <summary>
    ///   <p><em>Sets <c>DatabaseMaximumSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseMaximumSize<T>(this T toolSettings, int? databaseMaximumSize) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseMaximumSize"] = databaseMaximumSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseMaximumSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseMaximumSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseMaximumSize");
        return toolSettings;
    }
    #endregion
    #region DatabaseServiceObjective
    /// <summary>
    ///   <p><em>Sets <c>DatabaseServiceObjective</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseServiceObjective<T>(this T toolSettings, string databaseServiceObjective) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseServiceObjective"] = databaseServiceObjective;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseServiceObjective</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseServiceObjective<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseServiceObjective");
        return toolSettings;
    }
    #endregion
    #region DeployDatabaseInSingleUserMode
    /// <summary>
    ///   <p><em>Sets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T SetDeployDatabaseInSingleUserMode<T>(this T toolSettings, bool? deployDatabaseInSingleUserMode) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = deployDatabaseInSingleUserMode;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    #endregion
    #region DisableAndReenableDdlTriggers
    /// <summary>
    ///   <p><em>Sets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetDisableAndReenableDdlTriggers<T>(this T toolSettings, bool? disableAndReenableDdlTriggers) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = disableAndReenableDdlTriggers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    #endregion
    #region DisableIndexesForDataPhase
    /// <summary>
    ///   <p><em>Sets <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Disable indexes before importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetDisableIndexesForDataPhase<T>(this T toolSettings, bool? disableIndexesForDataPhase) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = disableIndexesForDataPhase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Disable indexes before importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableIndexesForDataPhase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableIndexesForDataPhase");
        return toolSettings;
    }
    #endregion
    #region DisableParallelismForEnablingIndexes
    /// <summary>
    ///   <p><em>Sets <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Not using parallelism when rebuilding indexes while importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetDisableParallelismForEnablingIndexes<T>(this T toolSettings, bool? disableParallelismForEnablingIndexes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = disableParallelismForEnablingIndexes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Not using parallelism when rebuilding indexes while importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableParallelismForEnablingIndexes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableParallelismForEnablingIndexes");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterChangeDataCaptureObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings, bool? doNotAlterChangeDataCaptureObjects) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = doNotAlterChangeDataCaptureObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterReplicatedObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterReplicatedObjects<T>(this T toolSettings, bool? doNotAlterReplicatedObjects) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = doNotAlterReplicatedObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotDropDatabaseWorkloadGroups
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>When false, Database WorkloadGroups in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropDatabaseWorkloadGroups<T>(this T toolSettings, bool? doNotDropDatabaseWorkloadGroups) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropDatabaseWorkloadGroups"] = doNotDropDatabaseWorkloadGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>When false, Database WorkloadGroups in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropDatabaseWorkloadGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotDropDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotDropDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropDatabaseWorkloadGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotDropDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotDropDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropDatabaseWorkloadGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotDropDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotDropDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotDropDatabaseWorkloadGroups");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectType
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectType</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectType<T>(this T toolSettings, string doNotDropObjectType) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropObjectType"] = doNotDropObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropObjectType</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropObjectType<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectType");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in existing <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T ClearDoNotDropObjectTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region DoNotDropWorkloadClassifiers
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>When false, WorkloadClassifiers in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropWorkloadClassifiers<T>(this T toolSettings, bool? doNotDropWorkloadClassifiers) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = doNotDropWorkloadClassifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>When false, WorkloadClassifiers in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropWorkloadClassifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotDropWorkloadClassifiers");
        return toolSettings;
    }
    #endregion
    #region DoNotEvaluateSqlCmdVariables
    /// <summary>
    ///   <p><em>Sets <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether SQLCMD variables to not replace with values</p>
    /// </summary>
    [Pure]
    public static T SetDoNotEvaluateSqlCmdVariables<T>(this T toolSettings, bool? doNotEvaluateSqlCmdVariables) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = doNotEvaluateSqlCmdVariables;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether SQLCMD variables to not replace with values</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotEvaluateSqlCmdVariables");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotEvaluateSqlCmdVariables");
        return toolSettings;
    }
    #endregion
    #region DropConstraintsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropConstraintsNotInSource<T>(this T toolSettings, bool? dropConstraintsNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = dropConstraintsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropConstraintsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropConstraintsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropConstraintsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropDmlTriggersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropDmlTriggersNotInSource<T>(this T toolSettings, bool? dropDmlTriggersNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = dropDmlTriggersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropDmlTriggersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropDmlTriggersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropExtendedPropertiesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropExtendedPropertiesNotInSource<T>(this T toolSettings, bool? dropExtendedPropertiesNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = dropExtendedPropertiesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropIndexesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropIndexesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropIndexesNotInSource<T>(this T toolSettings, bool? dropIndexesNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = dropIndexesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropIndexesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropIndexesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropIndexesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropIndexesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropIndexesNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropIndexesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropObjectsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropObjectsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T SetDropObjectsNotInSource<T>(this T toolSettings, bool? dropObjectsNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = dropObjectsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropObjectsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T ResetDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropObjectsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropObjectsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropObjectsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropObjectsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropObjectsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropPermissionsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropPermissionsNotInSource<T>(this T toolSettings, bool? dropPermissionsNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = dropPermissionsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropPermissionsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropPermissionsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropPermissionsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropRoleMembersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropRoleMembersNotInSource<T>(this T toolSettings, bool? dropRoleMembersNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = dropRoleMembersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropRoleMembersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropRoleMembersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropStatisticsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropStatisticsNotInSource<T>(this T toolSettings, bool? dropStatisticsNotInSource) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = dropStatisticsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropStatisticsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropStatisticsNotInSource</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropStatisticsNotInSource");
        return toolSettings;
    }
    #endregion
    #region EnclaveAttestationProtocol
    /// <summary>
    ///   <p><em>Sets <c>EnclaveAttestationProtocol</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies an attestation protocol to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T SetEnclaveAttestationProtocol<T>(this T toolSettings, string enclaveAttestationProtocol) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["EnclaveAttestationProtocol"] = enclaveAttestationProtocol;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>EnclaveAttestationProtocol</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies an attestation protocol to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T ResetEnclaveAttestationProtocol<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("EnclaveAttestationProtocol");
        return toolSettings;
    }
    #endregion
    #region EnclaveAttestationUrl
    /// <summary>
    ///   <p><em>Sets <c>EnclaveAttestationUrl</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the enclave attestation URL (an attestation service endpoint) to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T SetEnclaveAttestationUrl<T>(this T toolSettings, string enclaveAttestationUrl) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["EnclaveAttestationUrl"] = enclaveAttestationUrl;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>EnclaveAttestationUrl</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the enclave attestation URL (an attestation service endpoint) to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T ResetEnclaveAttestationUrl<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("EnclaveAttestationUrl");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectType
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectType</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectType<T>(this T toolSettings, string excludeObjectType) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExcludeObjectType"] = excludeObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExcludeObjectType</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetExcludeObjectType<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectType");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in existing <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T ClearExcludeObjectTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>A semicolon delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region GenerateSmartDefaults
    /// <summary>
    ///   <p><em>Sets <c>GenerateSmartDefaults</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T SetGenerateSmartDefaults<T>(this T toolSettings, bool? generateSmartDefaults) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = generateSmartDefaults;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>GenerateSmartDefaults</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T ResetGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("GenerateSmartDefaults");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>GenerateSmartDefaults</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>GenerateSmartDefaults</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>GenerateSmartDefaults</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "GenerateSmartDefaults");
        return toolSettings;
    }
    #endregion
    #region HashObjectNamesInLogs
    /// <summary>
    ///   <p><em>Sets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T SetHashObjectNamesInLogs<T>(this T toolSettings, bool? hashObjectNamesInLogs) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = hashObjectNamesInLogs;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T ResetHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("HashObjectNamesInLogs");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>HashObjectNamesInLogs</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "HashObjectNamesInLogs");
        return toolSettings;
    }
    #endregion
    #region IgnoreAnsiNulls
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAnsiNulls<T>(this T toolSettings, bool? ignoreAnsiNulls) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = ignoreAnsiNulls;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAnsiNulls");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAnsiNulls</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAnsiNulls");
        return toolSettings;
    }
    #endregion
    #region IgnoreAuthorizer
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAuthorizer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAuthorizer<T>(this T toolSettings, bool? ignoreAuthorizer) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = ignoreAuthorizer;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAuthorizer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAuthorizer");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAuthorizer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAuthorizer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAuthorizer</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAuthorizer");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnCollation
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnCollation<T>(this T toolSettings, bool? ignoreColumnCollation) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = ignoreColumnCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnCollation");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnOrder<T>(this T toolSettings, bool? ignoreColumnOrder) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = ignoreColumnOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreComments
    /// <summary>
    ///   <p><em>Sets <c>IgnoreComments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreComments<T>(this T toolSettings, bool? ignoreComments) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = ignoreComments;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreComments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreComments<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreComments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreComments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreComments<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreComments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreComments<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreComments</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreComments<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreComments");
        return toolSettings;
    }
    #endregion
    #region IgnoreCryptographicProviderFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreCryptographicProviderFilePath<T>(this T toolSettings, bool? ignoreCryptographicProviderFilePath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = ignoreCryptographicProviderFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreDatabaseWorkloadGroups
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload groups that exist on the target during deployment.  No Database Workload Groups will be added, modified, or dropped.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDatabaseWorkloadGroups<T>(this T toolSettings, bool? ignoreDatabaseWorkloadGroups) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = ignoreDatabaseWorkloadGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload groups that exist on the target during deployment.  No Database Workload Groups will be added, modified, or dropped.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDatabaseWorkloadGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDatabaseWorkloadGroups");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerOrder<T>(this T toolSettings, bool? ignoreDdlTriggerOrder) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = ignoreDdlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerState<T>(this T toolSettings, bool? ignoreDdlTriggerState) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = ignoreDdlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreDefaultSchema
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDefaultSchema<T>(this T toolSettings, bool? ignoreDefaultSchema) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = ignoreDefaultSchema;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDefaultSchema");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDefaultSchema</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDefaultSchema");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerOrder<T>(this T toolSettings, bool? ignoreDmlTriggerOrder) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = ignoreDmlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerState<T>(this T toolSettings, bool? ignoreDmlTriggerState) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = ignoreDmlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreExtendedProperties
    /// <summary>
    ///   <p><em>Sets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreExtendedProperties<T>(this T toolSettings, bool? ignoreExtendedProperties) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = ignoreExtendedProperties;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreExtendedProperties");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreExtendedProperties</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreExtendedProperties");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileAndLogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileAndLogFilePath<T>(this T toolSettings, bool? ignoreFileAndLogFilePath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = ignoreFileAndLogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreFilegroupPlacement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFilegroupPlacement<T>(this T toolSettings, bool? ignoreFilegroupPlacement) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = ignoreFilegroupPlacement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFilegroupPlacement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFilegroupPlacement");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileSize
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileSize<T>(this T toolSettings, bool? ignoreFileSize) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = ignoreFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileSize");
        return toolSettings;
    }
    #endregion
    #region IgnoreFillFactor
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFillFactor</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFillFactor<T>(this T toolSettings, bool? ignoreFillFactor) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = ignoreFillFactor;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFillFactor</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFillFactor");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFillFactor</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFillFactor</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFillFactor</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFillFactor");
        return toolSettings;
    }
    #endregion
    #region IgnoreFullTextCatalogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text catalog should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFullTextCatalogFilePath<T>(this T toolSettings, bool? ignoreFullTextCatalogFilePath) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = ignoreFullTextCatalogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text catalog should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreIdentitySeed
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIdentitySeed<T>(this T toolSettings, bool? ignoreIdentitySeed) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = ignoreIdentitySeed;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIdentitySeed");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIdentitySeed</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIdentitySeed");
        return toolSettings;
    }
    #endregion
    #region IgnoreIncrement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIncrement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIncrement<T>(this T toolSettings, bool? ignoreIncrement) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = ignoreIncrement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIncrement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIncrement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIncrement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIncrement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIncrement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIncrement</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIncrement<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIncrement");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexOptions<T>(this T toolSettings, bool? ignoreIndexOptions) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = ignoreIndexOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexPadding
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexPadding</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexPadding<T>(this T toolSettings, bool? ignoreIndexPadding) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = ignoreIndexPadding;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexPadding</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexPadding");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexPadding</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexPadding</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexPadding</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexPadding");
        return toolSettings;
    }
    #endregion
    #region IgnoreKeywordCasing
    /// <summary>
    ///   <p><em>Sets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreKeywordCasing<T>(this T toolSettings, bool? ignoreKeywordCasing) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = ignoreKeywordCasing;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreKeywordCasing");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreKeywordCasing</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreKeywordCasing");
        return toolSettings;
    }
    #endregion
    #region IgnoreLockHintsOnIndexes
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLockHintsOnIndexes<T>(this T toolSettings, bool? ignoreLockHintsOnIndexes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = ignoreLockHintsOnIndexes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    #endregion
    #region IgnoreLoginSids
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLoginSids</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLoginSids<T>(this T toolSettings, bool? ignoreLoginSids) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = ignoreLoginSids;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLoginSids</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLoginSids");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLoginSids</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLoginSids</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLoginSids</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLoginSids");
        return toolSettings;
    }
    #endregion
    #region IgnoreNotForReplication
    /// <summary>
    ///   <p><em>Sets <c>IgnoreNotForReplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreNotForReplication<T>(this T toolSettings, bool? ignoreNotForReplication) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = ignoreNotForReplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreNotForReplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreNotForReplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreNotForReplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreNotForReplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreNotForReplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreNotForReplication");
        return toolSettings;
    }
    #endregion
    #region IgnoreObjectPlacementOnPartitionScheme
    /// <summary>
    ///   <p><em>Sets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings, bool? ignoreObjectPlacementOnPartitionScheme) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = ignoreObjectPlacementOnPartitionScheme;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    #endregion
    #region IgnorePartitionSchemes
    /// <summary>
    ///   <p><em>Sets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePartitionSchemes<T>(this T toolSettings, bool? ignorePartitionSchemes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = ignorePartitionSchemes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePartitionSchemes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePartitionSchemes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePartitionSchemes");
        return toolSettings;
    }
    #endregion
    #region IgnorePermissions
    /// <summary>
    ///   <p><em>Sets <c>IgnorePermissions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePermissions<T>(this T toolSettings, bool? ignorePermissions) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = ignorePermissions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePermissions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePermissions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePermissions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePermissions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePermissions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePermissions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePermissions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePermissions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePermissions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePermissions");
        return toolSettings;
    }
    #endregion
    #region IgnoreQuotedIdentifiers
    /// <summary>
    ///   <p><em>Sets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreQuotedIdentifiers<T>(this T toolSettings, bool? ignoreQuotedIdentifiers) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = ignoreQuotedIdentifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    #endregion
    #region IgnoreRoleMembership
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRoleMembership</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRoleMembership<T>(this T toolSettings, bool? ignoreRoleMembership) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = ignoreRoleMembership;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRoleMembership</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRoleMembership");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRoleMembership</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRoleMembership</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRoleMembership</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRoleMembership");
        return toolSettings;
    }
    #endregion
    #region IgnoreRouteLifetime
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRouteLifetime<T>(this T toolSettings, bool? ignoreRouteLifetime) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = ignoreRouteLifetime;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRouteLifetime");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRouteLifetime</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRouteLifetime");
        return toolSettings;
    }
    #endregion
    #region IgnoreSemicolonBetweenStatements
    /// <summary>
    ///   <p><em>Sets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreSemicolonBetweenStatements<T>(this T toolSettings, bool? ignoreSemicolonBetweenStatements) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = ignoreSemicolonBetweenStatements;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    #endregion
    #region IgnoreSensitivityClassifications
    /// <summary>
    ///   <p><em>Sets <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether data sensitivity classifications on columns should be ignored when comparing schema models. This only works for classifications added with the ADD SENSITIVITY CLASSIFICATION syntax introduced in SQL 2019.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreSensitivityClassifications<T>(this T toolSettings, bool? ignoreSensitivityClassifications) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = ignoreSensitivityClassifications;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether data sensitivity classifications on columns should be ignored when comparing schema models. This only works for classifications added with the ADD SENSITIVITY CLASSIFICATION syntax introduced in SQL 2019.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreSensitivityClassifications");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreSensitivityClassifications");
        return toolSettings;
    }
    #endregion
    #region IgnoreTableOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTableOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTableOptions<T>(this T toolSettings, bool? ignoreTableOptions) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = ignoreTableOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTableOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTableOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTableOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTableOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTableOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTableOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreTablePartitionOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics dedicated SQL pool databases.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTablePartitionOptions<T>(this T toolSettings, bool? ignoreTablePartitionOptions) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = ignoreTablePartitionOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics dedicated SQL pool databases.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTablePartitionOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTablePartitionOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreUserSettingsObjects
    /// <summary>
    ///   <p><em>Sets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreUserSettingsObjects<T>(this T toolSettings, bool? ignoreUserSettingsObjects) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = ignoreUserSettingsObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreUserSettingsObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreUserSettingsObjects");
        return toolSettings;
    }
    #endregion
    #region IgnoreWhitespace
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWhitespace</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWhitespace<T>(this T toolSettings, bool? ignoreWhitespace) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = ignoreWhitespace;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWhitespace</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWhitespace");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWhitespace</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWhitespace</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWhitespace</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWhitespace");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnCheckConstraints
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings, bool? ignoreWithNocheckOnCheckConstraints) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = ignoreWithNocheckOnCheckConstraints;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnForeignKeys
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings, bool? ignoreWithNocheckOnForeignKeys) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = ignoreWithNocheckOnForeignKeys;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    #endregion
    #region IgnoreWorkloadClassifiers
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload classifiers that exist on the target during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWorkloadClassifiers<T>(this T toolSettings, bool? ignoreWorkloadClassifiers) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = ignoreWorkloadClassifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload classifiers that exist on the target during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWorkloadClassifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWorkloadClassifiers");
        return toolSettings;
    }
    #endregion
    #region IncludeCompositeObjects
    /// <summary>
    ///   <p><em>Sets <c>IncludeCompositeObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeCompositeObjects<T>(this T toolSettings, bool? includeCompositeObjects) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = includeCompositeObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeCompositeObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeCompositeObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeCompositeObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeCompositeObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeCompositeObjects</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeCompositeObjects");
        return toolSettings;
    }
    #endregion
    #region IncludeTransactionalScripts
    /// <summary>
    ///   <p><em>Sets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeTransactionalScripts<T>(this T toolSettings, bool? includeTransactionalScripts) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = includeTransactionalScripts;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeTransactionalScripts");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeTransactionalScripts</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeTransactionalScripts");
        return toolSettings;
    }
    #endregion
    #region IsAlwaysEncryptedParameterizationEnabled
    /// <summary>
    ///   <p><em>Sets <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Enables variable parameterization on Always Encrypted columns in pre/post deployment scripts.</p>
    /// </summary>
    [Pure]
    public static T SetIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings, bool? isAlwaysEncryptedParameterizationEnabled) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = isAlwaysEncryptedParameterizationEnabled;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Enables variable parameterization on Always Encrypted columns in pre/post deployment scripts.</p>
    /// </summary>
    [Pure]
    public static T ResetIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IsAlwaysEncryptedParameterizationEnabled");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IsAlwaysEncryptedParameterizationEnabled");
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region NoAlterStatementsToChangeClrTypes
    /// <summary>
    ///   <p><em>Sets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T SetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings, bool? noAlterStatementsToChangeClrTypes) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = noAlterStatementsToChangeClrTypes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T ResetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    #endregion
    #region PopulateFilesOnFileGroups
    /// <summary>
    ///   <p><em>Sets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T SetPopulateFilesOnFileGroups<T>(this T toolSettings, bool? populateFilesOnFileGroups) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = populateFilesOnFileGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetPopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PopulateFilesOnFileGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PopulateFilesOnFileGroups");
        return toolSettings;
    }
    #endregion
    #region PreserveIdentityLastValues
    /// <summary>
    ///   <p><em>Sets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetPreserveIdentityLastValues<T>(this T toolSettings, bool? preserveIdentityLastValues) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = preserveIdentityLastValues;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetPreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PreserveIdentityLastValues");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PreserveIdentityLastValues</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PreserveIdentityLastValues");
        return toolSettings;
    }
    #endregion
    #region RebuildIndexesOfflineForDataPhase
    /// <summary>
    ///   <p><em>Sets <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Rebuild indexes offline after importing data.</p>
    /// </summary>
    [Pure]
    public static T SetRebuildIndexesOfflineForDataPhase<T>(this T toolSettings, bool? rebuildIndexesOfflineForDataPhase) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = rebuildIndexesOfflineForDataPhase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Rebuild indexes offline after importing data.</p>
    /// </summary>
    [Pure]
    public static T ResetRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RebuildIndexesOfflineForDataPhase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RebuildIndexesOfflineForDataPhase");
        return toolSettings;
    }
    #endregion
    #region RegisterDataTierApplication
    /// <summary>
    ///   <p><em>Sets <c>RegisterDataTierApplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T SetRegisterDataTierApplication<T>(this T toolSettings, bool? registerDataTierApplication) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = registerDataTierApplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RegisterDataTierApplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T ResetRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RegisterDataTierApplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RegisterDataTierApplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RegisterDataTierApplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RegisterDataTierApplication</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RegisterDataTierApplication");
        return toolSettings;
    }
    #endregion
    #region RestoreSequenceCurrentValue
    /// <summary>
    ///   <p><em>Sets <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether sequence object current value should be deployed with dacpac file, the default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetRestoreSequenceCurrentValue<T>(this T toolSettings, bool? restoreSequenceCurrentValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = restoreSequenceCurrentValue;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether sequence object current value should be deployed with dacpac file, the default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RestoreSequenceCurrentValue");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RestoreSequenceCurrentValue");
        return toolSettings;
    }
    #endregion
    #region RunDeploymentPlanExecutors
    /// <summary>
    ///   <p><em>Sets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T SetRunDeploymentPlanExecutors<T>(this T toolSettings, bool? runDeploymentPlanExecutors) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = runDeploymentPlanExecutors;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T ResetRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RunDeploymentPlanExecutors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RunDeploymentPlanExecutors");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCollation
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCollation<T>(this T toolSettings, bool? scriptDatabaseCollation) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = scriptDatabaseCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCollation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCollation");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCompatibility
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCompatibility<T>(this T toolSettings, bool? scriptDatabaseCompatibility) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = scriptDatabaseCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCompatibility");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseOptions
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseOptions<T>(this T toolSettings, bool? scriptDatabaseOptions) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = scriptDatabaseOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseOptions</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseOptions");
        return toolSettings;
    }
    #endregion
    #region ScriptDeployStateChecks
    /// <summary>
    ///   <p><em>Sets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDeployStateChecks<T>(this T toolSettings, bool? scriptDeployStateChecks) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = scriptDeployStateChecks;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDeployStateChecks");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDeployStateChecks</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDeployStateChecks");
        return toolSettings;
    }
    #endregion
    #region ScriptFileSize
    /// <summary>
    ///   <p><em>Sets <c>ScriptFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T SetScriptFileSize<T>(this T toolSettings, bool? scriptFileSize) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = scriptFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptFileSize</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptFileSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptFileSize");
        return toolSettings;
    }
    #endregion
    #region ScriptNewConstraintValidation
    /// <summary>
    ///   <p><em>Sets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T SetScriptNewConstraintValidation<T>(this T toolSettings, bool? scriptNewConstraintValidation) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = scriptNewConstraintValidation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptNewConstraintValidation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptNewConstraintValidation");
        return toolSettings;
    }
    #endregion
    #region ScriptRefreshModule
    /// <summary>
    ///   <p><em>Sets <c>ScriptRefreshModule</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T SetScriptRefreshModule<T>(this T toolSettings, bool? scriptRefreshModule) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = scriptRefreshModule;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptRefreshModule</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptRefreshModule<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptRefreshModule");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptRefreshModule</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptRefreshModule</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptRefreshModule</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptRefreshModule<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptRefreshModule");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #region TreatVerificationErrorsAsWarnings
    /// <summary>
    ///   <p><em>Sets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T SetTreatVerificationErrorsAsWarnings<T>(this T toolSettings, bool? treatVerificationErrorsAsWarnings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = treatVerificationErrorsAsWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T ResetTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    #endregion
    #region UnmodifiableObjectWarnings
    /// <summary>
    ///   <p><em>Sets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T SetUnmodifiableObjectWarnings<T>(this T toolSettings, bool? unmodifiableObjectWarnings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = unmodifiableObjectWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T ResetUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("UnmodifiableObjectWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "UnmodifiableObjectWarnings");
        return toolSettings;
    }
    #endregion
    #region VerifyCollationCompatibility
    /// <summary>
    ///   <p><em>Sets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyCollationCompatibility<T>(this T toolSettings, bool? verifyCollationCompatibility) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = verifyCollationCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyCollationCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyCollationCompatibility</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyCollationCompatibility");
        return toolSettings;
    }
    #endregion
    #region VerifyDeployment
    /// <summary>
    ///   <p><em>Sets <c>VerifyDeployment</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyDeployment<T>(this T toolSettings, bool? verifyDeployment) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = verifyDeployment;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyDeployment</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyDeployment<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyDeployment");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyDeployment</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyDeployment<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyDeployment</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyDeployment<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyDeployment</c> in <see cref="SqlPackagePublishSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-publish-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyDeployment<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyDeployment");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region ReferencePaths
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.ReferencePaths"/> to a new dictionary</em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T SetReferencePaths<T>(this T toolSettings, IDictionary<string, object> referencePaths) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal = referencePaths.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackagePublishSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T ClearReferencePaths<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackagePublishSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T AddReferencePath<T>(this T toolSettings, string referencePathKey, object referencePathValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Add(referencePathKey, referencePathValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackagePublishSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T RemoveReferencePath<T>(this T toolSettings, string referencePathKey) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Remove(referencePathKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackagePublishSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T SetReferencePath<T>(this T toolSettings, string referencePathKey, object referencePathValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal[referencePathKey] = referencePathValue;
        return toolSettings;
    }
    #endregion
    #region Secret
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Secret"/></em></p>
    ///   <p>Specifies the Client Secret to be used in authenticating against Azure KeyVault, when necessary</p>
    /// </summary>
    [Pure]
    public static T SetSecret<T>(this T toolSettings, string secret) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Secret = secret;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.Secret"/></em></p>
    ///   <p>Specifies the Client Secret to be used in authenticating against Azure KeyVault, when necessary</p>
    /// </summary>
    [Pure]
    public static T ResetSecret<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Secret = null;
        return toolSettings;
    }
    #endregion
    #region SourceFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action instead of a database from local storage. If this name is used, no other source name shall be valid.</p>
    /// </summary>
    [Pure]
    public static T SetSourceFile<T>(this T toolSettings, string sourceFile) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = sourceFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action instead of a database from local storage. If this name is used, no other source name shall be valid.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceFile<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = null;
        return toolSettings;
    }
    #endregion
    #region SourceConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is specified, it shall be used exclusively of all other source names.</p>
    /// </summary>
    [Pure]
    public static T SetSourceConnectionString<T>(this T toolSettings, string sourceConnectionString) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = sourceConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is specified, it shall be used exclusively of all other source names.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceConnectionString<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region SourceDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceDatabaseName<T>(this T toolSettings, string sourceDatabaseName) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = sourceDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceDatabaseName<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region SourceEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetSourceEncryptConnection<T>(this T toolSettings, bool? sourceEncryptConnection) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = sourceEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = !toolSettings.SourceEncryptConnection;
        return toolSettings;
    }
    #endregion
    #region SourceHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetSourceHostNameInCertificate<T>(this T toolSettings, string sourceHostNameInCertificate) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = sourceHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceHostNameInCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region SourcePassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourcePassword<T>(this T toolSettings, string sourcePassword) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = sourcePassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourcePassword<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = null;
        return toolSettings;
    }
    #endregion
    #region SourceServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceServerName<T>(this T toolSettings, string sourceServerName) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = sourceServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceServerName<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = null;
        return toolSettings;
    }
    #endregion
    #region SourceTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTimeout<T>(this T toolSettings, int? sourceTimeout) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = sourceTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTimeout<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = null;
        return toolSettings;
    }
    #endregion
    #region SourceTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTrustServerCertificate<T>(this T toolSettings, bool? sourceTrustServerCertificate) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = sourceTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = !toolSettings.SourceTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region SourceUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceUser<T>(this T toolSettings, string sourceUser) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = sourceUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceUser<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = null;
        return toolSettings;
    }
    #endregion
    #region TargetConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is specified, it shall be used exclusively of all other target names.</p>
    /// </summary>
    [Pure]
    public static T SetTargetConnectionString<T>(this T toolSettings, string targetConnectionString) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = targetConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is specified, it shall be used exclusively of all other target names.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetConnectionString<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region TargetDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T SetTargetDatabaseName<T>(this T toolSettings, string targetDatabaseName) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = targetDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetDatabaseName<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region TargetEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEncryptConnection<T>(this T toolSettings, bool? targetEncryptConnection) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = targetEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = !toolSettings.TargetEncryptConnection;
        return toolSettings;
    }
    #endregion
    #region TargetHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetTargetHostNameInCertificate<T>(this T toolSettings, string targetHostNameInCertificate) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = targetHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetHostNameInCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region TargetPassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetPassword<T>(this T toolSettings, string targetPassword) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = targetPassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetPassword<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = null;
        return toolSettings;
    }
    #endregion
    #region TargetServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetServerName<T>(this T toolSettings, string targetServerName) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = targetServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetServerName<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = null;
        return toolSettings;
    }
    #endregion
    #region TargetTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTimeout<T>(this T toolSettings, int? targetTimeout) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = targetTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTimeout<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = null;
        return toolSettings;
    }
    #endregion
    #region TargetTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTrustServerCertificate<T>(this T toolSettings, bool? targetTrustServerCertificate) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = targetTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = !toolSettings.TargetTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region TargetUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetUser<T>(this T toolSettings, string targetUser) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = targetUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetUser<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region ThreadMaxStackSize
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T SetThreadMaxStackSize<T>(this T toolSettings, int? threadMaxStackSize) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = threadMaxStackSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T ResetThreadMaxStackSize<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackagePublishSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
    #region Variables
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackagePublishSettings.Variables"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariables<T>(this T toolSettings, IDictionary<string, object> variables) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackagePublishSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T ClearVariables<T>(this T toolSettings) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackagePublishSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T AddVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Add(variableKey, variableValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackagePublishSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T RemoveVariable<T>(this T toolSettings, string variableKey) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Remove(variableKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackagePublishSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackagePublishSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal[variableKey] = variableValue;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageDeployReportSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageDeployReportSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region OutputPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T SetOutputPath<T>(this T toolSettings, string outputPath) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = outputPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T ResetOutputPath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Profile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T SetProfile<T>(this T toolSettings, string profile) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = profile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T ResetProfile<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = null;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region AdditionalDeploymentContributorArguments
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in existing <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorArguments<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorArguments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributors
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in existing <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributors<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributorPaths
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in existing <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorPaths<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    #endregion
    #region AllowDropBlockingAssemblies
    /// <summary>
    ///   <p><em>Sets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T SetAllowDropBlockingAssemblies<T>(this T toolSettings, bool? allowDropBlockingAssemblies) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = allowDropBlockingAssemblies;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowDropBlockingAssemblies");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowDropBlockingAssemblies");
        return toolSettings;
    }
    #endregion
    #region AllowIncompatiblePlatform
    /// <summary>
    ///   <p><em>Sets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T SetAllowIncompatiblePlatform<T>(this T toolSettings, bool? allowIncompatiblePlatform) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = allowIncompatiblePlatform;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowIncompatiblePlatform");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowIncompatiblePlatform");
        return toolSettings;
    }
    #endregion
    #region AllowUnsafeRowLevelSecurityDataMovement
    /// <summary>
    ///   <p><em>Sets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T SetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings, bool? allowUnsafeRowLevelSecurityDataMovement) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = allowUnsafeRowLevelSecurityDataMovement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    #endregion
    #region BackupDatabaseBeforeChanges
    /// <summary>
    ///   <p><em>Sets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes.</p>
    /// </summary>
    [Pure]
    public static T SetBackupDatabaseBeforeChanges<T>(this T toolSettings, bool? backupDatabaseBeforeChanges) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = backupDatabaseBeforeChanges;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes.</p>
    /// </summary>
    [Pure]
    public static T ResetBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    #endregion
    #region BlockOnPossibleDataLoss
    /// <summary>
    ///   <p><em>Sets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T SetBlockOnPossibleDataLoss<T>(this T toolSettings, bool? blockOnPossibleDataLoss) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = blockOnPossibleDataLoss;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockOnPossibleDataLoss");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockOnPossibleDataLoss");
        return toolSettings;
    }
    #endregion
    #region BlockWhenDriftDetected
    /// <summary>
    ///   <p><em>Sets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T SetBlockWhenDriftDetected<T>(this T toolSettings, bool? blockWhenDriftDetected) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = blockWhenDriftDetected;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockWhenDriftDetected");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockWhenDriftDetected");
        return toolSettings;
    }
    #endregion
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region CommentOutSetVarDeclarations
    /// <summary>
    ///   <p><em>Sets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T SetCommentOutSetVarDeclarations<T>(this T toolSettings, bool? commentOutSetVarDeclarations) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = commentOutSetVarDeclarations;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T ResetCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommentOutSetVarDeclarations");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CommentOutSetVarDeclarations");
        return toolSettings;
    }
    #endregion
    #region CompareUsingTargetCollation
    /// <summary>
    ///   <p><em>Sets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T SetCompareUsingTargetCollation<T>(this T toolSettings, bool? compareUsingTargetCollation) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = compareUsingTargetCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T ResetCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CompareUsingTargetCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CompareUsingTargetCollation");
        return toolSettings;
    }
    #endregion
    #region CreateNewDatabase
    /// <summary>
    ///   <p><em>Sets <c>CreateNewDatabase</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetCreateNewDatabase<T>(this T toolSettings, bool? createNewDatabase) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = createNewDatabase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CreateNewDatabase</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CreateNewDatabase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CreateNewDatabase</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CreateNewDatabase</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CreateNewDatabase</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CreateNewDatabase");
        return toolSettings;
    }
    #endregion
    #region DatabaseEdition
    /// <summary>
    ///   <p><em>Sets <c>DatabaseEdition</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseEdition<T>(this T toolSettings, DatabaseEdition databaseEdition) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseEdition"] = databaseEdition;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseEdition</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseEdition<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseEdition");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region DatabaseMaximumSize
    /// <summary>
    ///   <p><em>Sets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseMaximumSize<T>(this T toolSettings, int? databaseMaximumSize) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseMaximumSize"] = databaseMaximumSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseMaximumSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseMaximumSize");
        return toolSettings;
    }
    #endregion
    #region DatabaseServiceObjective
    /// <summary>
    ///   <p><em>Sets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseServiceObjective<T>(this T toolSettings, string databaseServiceObjective) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseServiceObjective"] = databaseServiceObjective;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseServiceObjective<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseServiceObjective");
        return toolSettings;
    }
    #endregion
    #region DeployDatabaseInSingleUserMode
    /// <summary>
    ///   <p><em>Sets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T SetDeployDatabaseInSingleUserMode<T>(this T toolSettings, bool? deployDatabaseInSingleUserMode) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = deployDatabaseInSingleUserMode;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    #endregion
    #region DisableAndReenableDdlTriggers
    /// <summary>
    ///   <p><em>Sets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetDisableAndReenableDdlTriggers<T>(this T toolSettings, bool? disableAndReenableDdlTriggers) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = disableAndReenableDdlTriggers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterChangeDataCaptureObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings, bool? doNotAlterChangeDataCaptureObjects) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = doNotAlterChangeDataCaptureObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterReplicatedObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterReplicatedObjects<T>(this T toolSettings, bool? doNotAlterReplicatedObjects) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = doNotAlterReplicatedObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectType
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectType</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectType<T>(this T toolSettings, string doNotDropObjectType) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropObjectType"] = doNotDropObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropObjectType</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropObjectType<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectType");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in existing <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T ClearDoNotDropObjectTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region DropConstraintsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropConstraintsNotInSource<T>(this T toolSettings, bool? dropConstraintsNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = dropConstraintsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropConstraintsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropConstraintsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropDmlTriggersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropDmlTriggersNotInSource<T>(this T toolSettings, bool? dropDmlTriggersNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = dropDmlTriggersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropDmlTriggersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropDmlTriggersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropExtendedPropertiesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropExtendedPropertiesNotInSource<T>(this T toolSettings, bool? dropExtendedPropertiesNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = dropExtendedPropertiesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropIndexesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropIndexesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropIndexesNotInSource<T>(this T toolSettings, bool? dropIndexesNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = dropIndexesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropIndexesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropIndexesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropIndexesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropIndexesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropIndexesNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropIndexesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropObjectsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropObjectsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T SetDropObjectsNotInSource<T>(this T toolSettings, bool? dropObjectsNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = dropObjectsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropObjectsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T ResetDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropObjectsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropObjectsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropObjectsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropObjectsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropObjectsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropPermissionsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropPermissionsNotInSource<T>(this T toolSettings, bool? dropPermissionsNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = dropPermissionsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropPermissionsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropPermissionsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropRoleMembersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropRoleMembersNotInSource<T>(this T toolSettings, bool? dropRoleMembersNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = dropRoleMembersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropRoleMembersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropRoleMembersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropStatisticsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropStatisticsNotInSource<T>(this T toolSettings, bool? dropStatisticsNotInSource) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = dropStatisticsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropStatisticsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropStatisticsNotInSource");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectType
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectType</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectType<T>(this T toolSettings, string excludeObjectType) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExcludeObjectType"] = excludeObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExcludeObjectType</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T ResetExcludeObjectType<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectType");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in existing <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T ClearExcludeObjectTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region GenerateSmartDefaults
    /// <summary>
    ///   <p><em>Sets <c>GenerateSmartDefaults</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T SetGenerateSmartDefaults<T>(this T toolSettings, bool? generateSmartDefaults) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = generateSmartDefaults;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>GenerateSmartDefaults</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T ResetGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("GenerateSmartDefaults");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>GenerateSmartDefaults</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>GenerateSmartDefaults</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>GenerateSmartDefaults</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "GenerateSmartDefaults");
        return toolSettings;
    }
    #endregion
    #region IgnoreAnsiNulls
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAnsiNulls<T>(this T toolSettings, bool? ignoreAnsiNulls) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = ignoreAnsiNulls;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAnsiNulls");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAnsiNulls");
        return toolSettings;
    }
    #endregion
    #region IgnoreAuthorizer
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAuthorizer</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAuthorizer<T>(this T toolSettings, bool? ignoreAuthorizer) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = ignoreAuthorizer;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAuthorizer</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAuthorizer");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAuthorizer</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAuthorizer</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAuthorizer</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAuthorizer");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnCollation
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnCollation<T>(this T toolSettings, bool? ignoreColumnCollation) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = ignoreColumnCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnCollation");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnOrder<T>(this T toolSettings, bool? ignoreColumnOrder) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = ignoreColumnOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreComments
    /// <summary>
    ///   <p><em>Sets <c>IgnoreComments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreComments<T>(this T toolSettings, bool? ignoreComments) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = ignoreComments;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreComments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreComments<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreComments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreComments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreComments<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreComments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreComments<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreComments</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreComments<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreComments");
        return toolSettings;
    }
    #endregion
    #region IgnoreCryptographicProviderFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreCryptographicProviderFilePath<T>(this T toolSettings, bool? ignoreCryptographicProviderFilePath) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = ignoreCryptographicProviderFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerOrder<T>(this T toolSettings, bool? ignoreDdlTriggerOrder) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = ignoreDdlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerState<T>(this T toolSettings, bool? ignoreDdlTriggerState) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = ignoreDdlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreDefaultSchema
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDefaultSchema<T>(this T toolSettings, bool? ignoreDefaultSchema) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = ignoreDefaultSchema;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDefaultSchema");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDefaultSchema");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerOrder<T>(this T toolSettings, bool? ignoreDmlTriggerOrder) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = ignoreDmlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerState<T>(this T toolSettings, bool? ignoreDmlTriggerState) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = ignoreDmlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreExtendedProperties
    /// <summary>
    ///   <p><em>Sets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreExtendedProperties<T>(this T toolSettings, bool? ignoreExtendedProperties) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = ignoreExtendedProperties;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreExtendedProperties");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreExtendedProperties");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileAndLogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileAndLogFilePath<T>(this T toolSettings, bool? ignoreFileAndLogFilePath) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = ignoreFileAndLogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreFilegroupPlacement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFilegroupPlacement<T>(this T toolSettings, bool? ignoreFilegroupPlacement) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = ignoreFilegroupPlacement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFilegroupPlacement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFilegroupPlacement");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileSize
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileSize<T>(this T toolSettings, bool? ignoreFileSize) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = ignoreFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileSize");
        return toolSettings;
    }
    #endregion
    #region IgnoreFillFactor
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFillFactor</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish to a database</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFillFactor<T>(this T toolSettings, bool? ignoreFillFactor) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = ignoreFillFactor;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFillFactor</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish to a database</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFillFactor");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFillFactor</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFillFactor</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFillFactor</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFillFactor");
        return toolSettings;
    }
    #endregion
    #region IgnoreFullTextCatalogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text catalog should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFullTextCatalogFilePath<T>(this T toolSettings, bool? ignoreFullTextCatalogFilePath) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = ignoreFullTextCatalogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text catalog should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreIdentitySeed
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIdentitySeed<T>(this T toolSettings, bool? ignoreIdentitySeed) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = ignoreIdentitySeed;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIdentitySeed");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIdentitySeed");
        return toolSettings;
    }
    #endregion
    #region IgnoreIncrement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIncrement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIncrement<T>(this T toolSettings, bool? ignoreIncrement) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = ignoreIncrement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIncrement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIncrement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIncrement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIncrement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIncrement</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIncrement");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexOptions<T>(this T toolSettings, bool? ignoreIndexOptions) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = ignoreIndexOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexPadding
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexPadding</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexPadding<T>(this T toolSettings, bool? ignoreIndexPadding) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = ignoreIndexPadding;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexPadding</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexPadding");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexPadding</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexPadding</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexPadding</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexPadding");
        return toolSettings;
    }
    #endregion
    #region IgnoreKeywordCasing
    /// <summary>
    ///   <p><em>Sets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreKeywordCasing<T>(this T toolSettings, bool? ignoreKeywordCasing) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = ignoreKeywordCasing;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreKeywordCasing");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreKeywordCasing");
        return toolSettings;
    }
    #endregion
    #region IgnoreLockHintsOnIndexes
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLockHintsOnIndexes<T>(this T toolSettings, bool? ignoreLockHintsOnIndexes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = ignoreLockHintsOnIndexes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    #endregion
    #region IgnoreLoginSids
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLoginSids</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLoginSids<T>(this T toolSettings, bool? ignoreLoginSids) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = ignoreLoginSids;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLoginSids</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLoginSids");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLoginSids</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLoginSids</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLoginSids</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLoginSids");
        return toolSettings;
    }
    #endregion
    #region IgnoreNotForReplication
    /// <summary>
    ///   <p><em>Sets <c>IgnoreNotForReplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreNotForReplication<T>(this T toolSettings, bool? ignoreNotForReplication) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = ignoreNotForReplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreNotForReplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreNotForReplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreNotForReplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreNotForReplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreNotForReplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreNotForReplication");
        return toolSettings;
    }
    #endregion
    #region IgnoreObjectPlacementOnPartitionScheme
    /// <summary>
    ///   <p><em>Sets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings, bool? ignoreObjectPlacementOnPartitionScheme) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = ignoreObjectPlacementOnPartitionScheme;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    #endregion
    #region IgnorePartitionSchemes
    /// <summary>
    ///   <p><em>Sets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Stypepecifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePartitionSchemes<T>(this T toolSettings, bool? ignorePartitionSchemes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = ignorePartitionSchemes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Stypepecifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePartitionSchemes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePartitionSchemes");
        return toolSettings;
    }
    #endregion
    #region IgnorePermissions
    /// <summary>
    ///   <p><em>Sets <c>IgnorePermissions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePermissions<T>(this T toolSettings, bool? ignorePermissions) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = ignorePermissions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePermissions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePermissions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePermissions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePermissions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePermissions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePermissions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePermissions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePermissions");
        return toolSettings;
    }
    #endregion
    #region IgnoreQuotedIdentifiers
    /// <summary>
    ///   <p><em>Sets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreQuotedIdentifiers<T>(this T toolSettings, bool? ignoreQuotedIdentifiers) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = ignoreQuotedIdentifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    #endregion
    #region IgnoreRoleMembership
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRoleMembership</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRoleMembership<T>(this T toolSettings, bool? ignoreRoleMembership) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = ignoreRoleMembership;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRoleMembership</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRoleMembership");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRoleMembership</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRoleMembership</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRoleMembership</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRoleMembership");
        return toolSettings;
    }
    #endregion
    #region IgnoreRouteLifetime
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRouteLifetime<T>(this T toolSettings, bool? ignoreRouteLifetime) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = ignoreRouteLifetime;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRouteLifetime");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRouteLifetime");
        return toolSettings;
    }
    #endregion
    #region IgnoreSemicolonBetweenStatements
    /// <summary>
    ///   <p><em>Sets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreSemicolonBetweenStatements<T>(this T toolSettings, bool? ignoreSemicolonBetweenStatements) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = ignoreSemicolonBetweenStatements;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    #endregion
    #region IgnoreTableOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTableOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTableOptions<T>(this T toolSettings, bool? ignoreTableOptions) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = ignoreTableOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTableOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTableOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTableOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTableOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTableOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTableOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreTablePartitionOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics data warehouse databases.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTablePartitionOptions<T>(this T toolSettings, bool? ignoreTablePartitionOptions) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = ignoreTablePartitionOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics data warehouse databases.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTablePartitionOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTablePartitionOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreUserSettingsObjects
    /// <summary>
    ///   <p><em>Sets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreUserSettingsObjects<T>(this T toolSettings, bool? ignoreUserSettingsObjects) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = ignoreUserSettingsObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreUserSettingsObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreUserSettingsObjects");
        return toolSettings;
    }
    #endregion
    #region IgnoreWhitespace
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWhitespace</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWhitespace<T>(this T toolSettings, bool? ignoreWhitespace) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = ignoreWhitespace;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWhitespace</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWhitespace");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWhitespace</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWhitespace</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWhitespace</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWhitespace");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnCheckConstraints
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings, bool? ignoreWithNocheckOnCheckConstraints) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = ignoreWithNocheckOnCheckConstraints;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnForeignKeys
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings, bool? ignoreWithNocheckOnForeignKeys) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = ignoreWithNocheckOnForeignKeys;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    #endregion
    #region IncludeCompositeObjects
    /// <summary>
    ///   <p><em>Sets <c>IncludeCompositeObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeCompositeObjects<T>(this T toolSettings, bool? includeCompositeObjects) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = includeCompositeObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeCompositeObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeCompositeObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeCompositeObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeCompositeObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeCompositeObjects</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeCompositeObjects");
        return toolSettings;
    }
    #endregion
    #region IncludeTransactionalScripts
    /// <summary>
    ///   <p><em>Sets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeTransactionalScripts<T>(this T toolSettings, bool? includeTransactionalScripts) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = includeTransactionalScripts;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeTransactionalScripts");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeTransactionalScripts");
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region NoAlterStatementsToChangeClrTypes
    /// <summary>
    ///   <p><em>Sets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T SetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings, bool? noAlterStatementsToChangeClrTypes) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = noAlterStatementsToChangeClrTypes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T ResetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    #endregion
    #region PopulateFilesOnFileGroups
    /// <summary>
    ///   <p><em>Sets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T SetPopulateFilesOnFileGroups<T>(this T toolSettings, bool? populateFilesOnFileGroups) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = populateFilesOnFileGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetPopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PopulateFilesOnFileGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PopulateFilesOnFileGroups");
        return toolSettings;
    }
    #endregion
    #region RegisterDataTierApplication
    /// <summary>
    ///   <p><em>Sets <c>RegisterDataTierApplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T SetRegisterDataTierApplication<T>(this T toolSettings, bool? registerDataTierApplication) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = registerDataTierApplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RegisterDataTierApplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T ResetRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RegisterDataTierApplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RegisterDataTierApplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RegisterDataTierApplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RegisterDataTierApplication</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RegisterDataTierApplication");
        return toolSettings;
    }
    #endregion
    #region RunDeploymentPlanExecutors
    /// <summary>
    ///   <p><em>Sets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T SetRunDeploymentPlanExecutors<T>(this T toolSettings, bool? runDeploymentPlanExecutors) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = runDeploymentPlanExecutors;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T ResetRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RunDeploymentPlanExecutors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RunDeploymentPlanExecutors");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCollation
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCollation<T>(this T toolSettings, bool? scriptDatabaseCollation) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = scriptDatabaseCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCollation");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCompatibility
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCompatibility<T>(this T toolSettings, bool? scriptDatabaseCompatibility) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = scriptDatabaseCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCompatibility");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseOptions
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseOptions<T>(this T toolSettings, bool? scriptDatabaseOptions) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = scriptDatabaseOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseOptions");
        return toolSettings;
    }
    #endregion
    #region ScriptDeployStateChecks
    /// <summary>
    ///   <p><em>Sets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDeployStateChecks<T>(this T toolSettings, bool? scriptDeployStateChecks) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = scriptDeployStateChecks;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDeployStateChecks");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDeployStateChecks");
        return toolSettings;
    }
    #endregion
    #region ScriptFileSize
    /// <summary>
    ///   <p><em>Sets <c>ScriptFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T SetScriptFileSize<T>(this T toolSettings, bool? scriptFileSize) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = scriptFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptFileSize</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptFileSize<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptFileSize");
        return toolSettings;
    }
    #endregion
    #region ScriptNewConstraintValidation
    /// <summary>
    ///   <p><em>Sets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T SetScriptNewConstraintValidation<T>(this T toolSettings, bool? scriptNewConstraintValidation) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = scriptNewConstraintValidation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptNewConstraintValidation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptNewConstraintValidation");
        return toolSettings;
    }
    #endregion
    #region ScriptRefreshModule
    /// <summary>
    ///   <p><em>Sets <c>ScriptRefreshModule</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T SetScriptRefreshModule<T>(this T toolSettings, bool? scriptRefreshModule) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = scriptRefreshModule;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptRefreshModule</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptRefreshModule");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptRefreshModule</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptRefreshModule</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptRefreshModule</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptRefreshModule");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #region TreatVerificationErrorsAsWarnings
    /// <summary>
    ///   <p><em>Sets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T SetTreatVerificationErrorsAsWarnings<T>(this T toolSettings, bool? treatVerificationErrorsAsWarnings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = treatVerificationErrorsAsWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T ResetTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    #endregion
    #region UnmodifiableObjectWarnings
    /// <summary>
    ///   <p><em>Sets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T SetUnmodifiableObjectWarnings<T>(this T toolSettings, bool? unmodifiableObjectWarnings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = unmodifiableObjectWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T ResetUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("UnmodifiableObjectWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "UnmodifiableObjectWarnings");
        return toolSettings;
    }
    #endregion
    #region VerifyCollationCompatibility
    /// <summary>
    ///   <p><em>Sets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyCollationCompatibility<T>(this T toolSettings, bool? verifyCollationCompatibility) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = verifyCollationCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyCollationCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyCollationCompatibility");
        return toolSettings;
    }
    #endregion
    #region VerifyDeployment
    /// <summary>
    ///   <p><em>Sets <c>VerifyDeployment</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyDeployment<T>(this T toolSettings, bool? verifyDeployment) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = verifyDeployment;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyDeployment</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyDeployment<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyDeployment");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyDeployment</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyDeployment<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyDeployment</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyDeployment<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyDeployment</c> in <see cref="SqlPackageDeployReportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#deployreport-action-properties); {key}={value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyDeployment<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyDeployment");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region SourceFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action instead of a database. If this name is ed, no other source name sha beva.</p>
    /// </summary>
    [Pure]
    public static T SetSourceFile<T>(this T toolSettings, string sourceFile) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = sourceFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action instead of a database. If this name is ed, no other source name sha beva.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceFile<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = null;
        return toolSettings;
    }
    #endregion
    #region SourceConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is ecified, it shall be used exclusively of all other sourcen.</p>
    /// </summary>
    [Pure]
    public static T SetSourceConnectionString<T>(this T toolSettings, string sourceConnectionString) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = sourceConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this name is ecified, it shall be used exclusively of all other sourcen.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceConnectionString<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region SourceDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceDatabaseName<T>(this T toolSettings, string sourceDatabaseName) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = sourceDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceDatabaseName<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region SourceEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetSourceEncryptConnection<T>(this T toolSettings, EncryptionType sourceEncryptConnection) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = sourceEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region SourceHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetSourceHostNameInCertificate<T>(this T toolSettings, string sourceHostNameInCertificate) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = sourceHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region SourcePassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourcePassword<T>(this T toolSettings, string sourcePassword) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = sourcePassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourcePassword<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = null;
        return toolSettings;
    }
    #endregion
    #region SourceServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceServerName<T>(this T toolSettings, string sourceServerName) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = sourceServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceServerName<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = null;
        return toolSettings;
    }
    #endregion
    #region SourceTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTimeout<T>(this T toolSettings, int? sourceTimeout) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = sourceTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTimeout<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = null;
        return toolSettings;
    }
    #endregion
    #region SourceTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTrustServerCertificate<T>(this T toolSettings, bool? sourceTrustServerCertificate) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = sourceTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = !toolSettings.SourceTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region SourceUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceUser<T>(this T toolSettings, string sourceUser) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = sourceUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceUser<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = null;
        return toolSettings;
    }
    #endregion
    #region TargetFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this name is ed, no other target name sha be valid. This name sha be invalid for actions that only support databasetarg.</p>
    /// </summary>
    [Pure]
    public static T SetTargetFile<T>(this T toolSettings, string targetFile) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = targetFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this name is ed, no other target name sha be valid. This name sha be invalid for actions that only support databasetarg.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetFile<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = null;
        return toolSettings;
    }
    #endregion
    #region TargetConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is ecified, it shall be used exclusively of all other targetn </p>
    /// </summary>
    [Pure]
    public static T SetTargetConnectionString<T>(this T toolSettings, string targetConnectionString) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = targetConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this name is ecified, it shall be used exclusively of all other targetn </p>
    /// </summary>
    [Pure]
    public static T ResetTargetConnectionString<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region TargetDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T SetTargetDatabaseName<T>(this T toolSettings, string targetDatabaseName) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = targetDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetDatabaseName<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region TargetEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEncryptConnection<T>(this T toolSettings, EncryptionType targetEncryptConnection) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = targetEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region TargetHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetTargetHostNameInCertificate<T>(this T toolSettings, string targetHostNameInCertificate) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = targetHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region TargetPassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetPassword<T>(this T toolSettings, string targetPassword) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = targetPassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetPassword<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = null;
        return toolSettings;
    }
    #endregion
    #region TargetServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetServerName<T>(this T toolSettings, string targetServerName) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = targetServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetServerName<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = null;
        return toolSettings;
    }
    #endregion
    #region TargetTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTimeout<T>(this T toolSettings, int? targetTimeout) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = targetTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTimeout<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = null;
        return toolSettings;
    }
    #endregion
    #region TargetTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTrustServerCertificate<T>(this T toolSettings, bool? targetTrustServerCertificate) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = targetTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = !toolSettings.TargetTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region TargetUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetUser<T>(this T toolSettings, string targetUser) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = targetUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetUser<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is itted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfaauthenticati.</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this name is itted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfaauthenticati.</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDeployReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
    #region Variables
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDeployReportSettings.Variables"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariables<T>(this T toolSettings, IDictionary<string, object> variables) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageDeployReportSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T ClearVariables<T>(this T toolSettings) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageDeployReportSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T AddVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Add(variableKey, variableValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageDeployReportSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T RemoveVariable<T>(this T toolSettings, string variableKey) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Remove(variableKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageDeployReportSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable; {VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackageDeployReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal[variableKey] = variableValue;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageDriftReportSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageDriftReportSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDriftReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDriftReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDriftReportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region OutputPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T SetOutputPath<T>(this T toolSettings, string outputPath) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = outputPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T ResetOutputPath<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDriftReportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDriftReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDriftReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDriftReportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region TargetConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid SQL Server/Azure connection string to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T SetTargetConnectionString<T>(this T toolSettings, string targetConnectionString) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = targetConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid SQL Server/Azure connection string to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetConnectionString<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region TargetDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T SetTargetDatabaseName<T>(this T toolSettings, string targetDatabaseName) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = targetDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetDatabaseName<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region TargetEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEncryptConnection<T>(this T toolSettings, EncryptionType targetEncryptConnection) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = targetEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region TargetHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetTargetHostNameInCertificate<T>(this T toolSettings, string targetHostNameInCertificate) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = targetHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region TargetPassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetPassword<T>(this T toolSettings, string targetPassword) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = targetPassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetPassword<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = null;
        return toolSettings;
    }
    #endregion
    #region TargetServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetServerName<T>(this T toolSettings, string targetServerName) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = targetServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetServerName<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = null;
        return toolSettings;
    }
    #endregion
    #region TargetTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTimeout<T>(this T toolSettings, int? targetTimeout) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = targetTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTimeout<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = null;
        return toolSettings;
    }
    #endregion
    #region TargetTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTrustServerCertificate<T>(this T toolSettings, bool? targetTrustServerCertificate) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = targetTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDriftReportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = !toolSettings.TargetTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region TargetUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetUser<T>(this T toolSettings, string targetUser) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = targetUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetUser<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageDriftReportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageDriftReportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageScriptSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageScriptSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region AzureCloudConfig
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T SetAzureCloudConfig<T>(this T toolSettings, string azureCloudConfig) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = azureCloudConfig;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T ResetAzureCloudConfig<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = null;
        return toolSettings;
    }
    #endregion
    #region DeployReportPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.DeployReportPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment report xml file.</p>
    /// </summary>
    [Pure]
    public static T SetDeployReportPath<T>(this T toolSettings, string deployReportPath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployReportPath = deployReportPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.DeployReportPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment report xml file.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployReportPath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployReportPath = null;
        return toolSettings;
    }
    #endregion
    #region DeployScriptPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.DeployScriptPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.</p>
    /// </summary>
    [Pure]
    public static T SetDeployScriptPath<T>(this T toolSettings, string deployScriptPath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployScriptPath = deployScriptPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.DeployScriptPath"/></em></p>
    ///   <p>Specifies an optional file path to output the deployment script. For Azure deployments, if there are TSQL commands to create or modify the master database, a script will be written to the same path but with "Filename_Master.sql" as the output file name.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployScriptPath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DeployScriptPath = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region ModelFilePath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T SetModelFilePath<T>(this T toolSettings, string modelFilePath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = modelFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T ResetModelFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = null;
        return toolSettings;
    }
    #endregion
    #region OutputPath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T SetOutputPath<T>(this T toolSettings, string outputPath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = outputPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.OutputPath"/></em></p>
    ///   <p>Specifies the file path where the output files are generated.</p>
    /// </summary>
    [Pure]
    public static T ResetOutputPath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OutputPath = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Profile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T SetProfile<T>(this T toolSettings, string profile) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = profile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.Profile"/></em></p>
    ///   <p>Specifies the file path to a DAC Publish Profile. The profile defines a collection of properties and variables to use when generating outputs.</p>
    /// </summary>
    [Pure]
    public static T ResetProfile<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Profile = null;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region AdditionalDeploymentContributorArguments
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorArguments</c> in existing <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorArguments<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorArguments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, params string[] additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorArguments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributor arguments for the deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorArguments<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorArguments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorArguments", additionalDeploymentContributorArguments, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributors
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributors</c> in existing <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributors<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, params string[] additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies additional deployment contributors, which should run when the dacpac is deployed. This should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributors<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributors", additionalDeploymentContributors, ';');
        return toolSettings;
    }
    #endregion
    #region AdditionalDeploymentContributorPaths
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>AdditionalDeploymentContributorPaths</c> in existing <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearAdditionalDeploymentContributorPaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AdditionalDeploymentContributorPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, params string[] additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>AdditionalDeploymentContributorPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional deployment contributors. This should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveAdditionalDeploymentContributorPaths<T>(this T toolSettings, IEnumerable<string> additionalDeploymentContributorPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "AdditionalDeploymentContributorPaths", additionalDeploymentContributorPaths, ';');
        return toolSettings;
    }
    #endregion
    #region AllowDropBlockingAssemblies
    /// <summary>
    ///   <p><em>Sets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T SetAllowDropBlockingAssemblies<T>(this T toolSettings, bool? allowDropBlockingAssemblies) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = allowDropBlockingAssemblies;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>This property is used by SqlClr deployment to cause any blocking assemblies to be dropped as part of the deployment plan. By default, any blocking/referencing assemblies will block an assembly update if the referencing assembly needs to be dropped.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowDropBlockingAssemblies");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowDropBlockingAssemblies"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowDropBlockingAssemblies</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowDropBlockingAssemblies<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowDropBlockingAssemblies");
        return toolSettings;
    }
    #endregion
    #region AllowExternalLanguagePaths
    /// <summary>
    ///   <p><em>Sets <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external language statements.</p>
    /// </summary>
    [Pure]
    public static T SetAllowExternalLanguagePaths<T>(this T toolSettings, bool? allowExternalLanguagePaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = allowExternalLanguagePaths;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external language statements.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowExternalLanguagePaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLanguagePaths"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowExternalLanguagePaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowExternalLanguagePaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowExternalLanguagePaths");
        return toolSettings;
    }
    #endregion
    #region AllowExternalLibraryPaths
    /// <summary>
    ///   <p><em>Sets <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external library statements.</p>
    /// </summary>
    [Pure]
    public static T SetAllowExternalLibraryPaths<T>(this T toolSettings, bool? allowExternalLibraryPaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = allowExternalLibraryPaths;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Allows file paths, if available, to be used to generate external library statements.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowExternalLibraryPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowExternalLibraryPaths"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowExternalLibraryPaths</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowExternalLibraryPaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowExternalLibraryPaths");
        return toolSettings;
    }
    #endregion
    #region AllowIncompatiblePlatform
    /// <summary>
    ///   <p><em>Sets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T SetAllowIncompatiblePlatform<T>(this T toolSettings, bool? allowIncompatiblePlatform) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = allowIncompatiblePlatform;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to attempt the action despite incompatible SQL Server platforms.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowIncompatiblePlatform");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowIncompatiblePlatform"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowIncompatiblePlatform</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowIncompatiblePlatform<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowIncompatiblePlatform");
        return toolSettings;
    }
    #endregion
    #region AllowUnsafeRowLevelSecurityDataMovement
    /// <summary>
    ///   <p><em>Sets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T SetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings, bool? allowUnsafeRowLevelSecurityDataMovement) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = allowUnsafeRowLevelSecurityDataMovement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Do not block data motion on a table that has Row Level Security if this property is set to true. Default is false.</p>
    /// </summary>
    [Pure]
    public static T ResetAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AllowUnsafeRowLevelSecurityDataMovement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>AllowUnsafeRowLevelSecurityDataMovement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleAllowUnsafeRowLevelSecurityDataMovement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "AllowUnsafeRowLevelSecurityDataMovement");
        return toolSettings;
    }
    #endregion
    #region BackupDatabaseBeforeChanges
    /// <summary>
    ///   <p><em>Sets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes.</p>
    /// </summary>
    [Pure]
    public static T SetBackupDatabaseBeforeChanges<T>(this T toolSettings, bool? backupDatabaseBeforeChanges) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = backupDatabaseBeforeChanges;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Backups the database before deploying any changes.</p>
    /// </summary>
    [Pure]
    public static T ResetBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BackupDatabaseBeforeChanges"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BackupDatabaseBeforeChanges</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBackupDatabaseBeforeChanges<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BackupDatabaseBeforeChanges");
        return toolSettings;
    }
    #endregion
    #region BlockOnPossibleDataLoss
    /// <summary>
    ///   <p><em>Sets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T SetBlockOnPossibleDataLoss<T>(this T toolSettings, bool? blockOnPossibleDataLoss) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = blockOnPossibleDataLoss;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies that the operation will be terminated during the schema validation step if the resulting schema changes could incur a loss of data, including due to data precision reduction or a data type change that requires a cast operation. The default (`True`) value causes the operation to terminate regardless if the target database contains data.  An execution with a `False` value for BlockOnPossibleDataLoss can still fail during deployment plan execution if data is present on the target that cannot be converted to the new column type.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockOnPossibleDataLoss");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockOnPossibleDataLoss"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockOnPossibleDataLoss</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockOnPossibleDataLoss<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockOnPossibleDataLoss");
        return toolSettings;
    }
    #endregion
    #region BlockWhenDriftDetected
    /// <summary>
    ///   <p><em>Sets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T SetBlockWhenDriftDetected<T>(this T toolSettings, bool? blockWhenDriftDetected) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = blockWhenDriftDetected;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to block updating a database whose schema no longer matches its registration or is unregistered.</p>
    /// </summary>
    [Pure]
    public static T ResetBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("BlockWhenDriftDetected");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["BlockWhenDriftDetected"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>BlockWhenDriftDetected</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleBlockWhenDriftDetected<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "BlockWhenDriftDetected");
        return toolSettings;
    }
    #endregion
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region CommentOutSetVarDeclarations
    /// <summary>
    ///   <p><em>Sets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T SetCommentOutSetVarDeclarations<T>(this T toolSettings, bool? commentOutSetVarDeclarations) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = commentOutSetVarDeclarations;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the declaration of SETVAR variables should be commented out in the generated publish script. You might choose to do this if you plan to specify the values on the command line when you publish by using a tool such as SQLCMD.EXE.</p>
    /// </summary>
    [Pure]
    public static T ResetCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommentOutSetVarDeclarations");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommentOutSetVarDeclarations"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CommentOutSetVarDeclarations</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCommentOutSetVarDeclarations<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CommentOutSetVarDeclarations");
        return toolSettings;
    }
    #endregion
    #region CompareUsingTargetCollation
    /// <summary>
    ///   <p><em>Sets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T SetCompareUsingTargetCollation<T>(this T toolSettings, bool? compareUsingTargetCollation) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = compareUsingTargetCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>This setting dictates how the database's collation is handled during deployment; by default the target database's collation will be updated if it does not match the collation specified by the source. When this option is set, the target database's (or server's) collation should be used.</p>
    /// </summary>
    [Pure]
    public static T ResetCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CompareUsingTargetCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompareUsingTargetCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CompareUsingTargetCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCompareUsingTargetCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CompareUsingTargetCollation");
        return toolSettings;
    }
    #endregion
    #region CreateNewDatabase
    /// <summary>
    ///   <p><em>Sets <c>CreateNewDatabase</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetCreateNewDatabase<T>(this T toolSettings, bool? createNewDatabase) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = createNewDatabase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CreateNewDatabase</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the target database should be updated or whether it should be dropped and re-created when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CreateNewDatabase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>CreateNewDatabase</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>CreateNewDatabase</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CreateNewDatabase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>CreateNewDatabase</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleCreateNewDatabase<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "CreateNewDatabase");
        return toolSettings;
    }
    #endregion
    #region DatabaseEdition
    /// <summary>
    ///   <p><em>Sets <c>DatabaseEdition</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseEdition<T>(this T toolSettings, DatabaseEdition databaseEdition) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseEdition"] = databaseEdition;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseEdition</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseEdition<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseEdition");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region DatabaseMaximumSize
    /// <summary>
    ///   <p><em>Sets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseMaximumSize<T>(this T toolSettings, int? databaseMaximumSize) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseMaximumSize"] = databaseMaximumSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseMaximumSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseMaximumSize");
        return toolSettings;
    }
    #endregion
    #region DatabaseServiceObjective
    /// <summary>
    ///   <p><em>Sets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseServiceObjective<T>(this T toolSettings, string databaseServiceObjective) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseServiceObjective"] = databaseServiceObjective;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseServiceObjective<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseServiceObjective");
        return toolSettings;
    }
    #endregion
    #region DeployDatabaseInSingleUserMode
    /// <summary>
    ///   <p><em>Sets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T SetDeployDatabaseInSingleUserMode<T>(this T toolSettings, bool? deployDatabaseInSingleUserMode) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = deployDatabaseInSingleUserMode;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>if true, the database is set to Single User Mode before deploying.</p>
    /// </summary>
    [Pure]
    public static T ResetDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DeployDatabaseInSingleUserMode"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DeployDatabaseInSingleUserMode</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDeployDatabaseInSingleUserMode<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DeployDatabaseInSingleUserMode");
        return toolSettings;
    }
    #endregion
    #region DisableAndReenableDdlTriggers
    /// <summary>
    ///   <p><em>Sets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetDisableAndReenableDdlTriggers<T>(this T toolSettings, bool? disableAndReenableDdlTriggers) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = disableAndReenableDdlTriggers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether Data Definition Language (DDL) triggers are disabled at the beginning of the publish process and re-enabled at the end of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableAndReenableDdlTriggers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableAndReenableDdlTriggers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableAndReenableDdlTriggers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableAndReenableDdlTriggers");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterChangeDataCaptureObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings, bool? doNotAlterChangeDataCaptureObjects) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = doNotAlterChangeDataCaptureObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>If true, Change Data Capture objects are not altered.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterChangeDataCaptureObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterChangeDataCaptureObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterChangeDataCaptureObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterChangeDataCaptureObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotAlterReplicatedObjects
    /// <summary>
    ///   <p><em>Sets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotAlterReplicatedObjects<T>(this T toolSettings, bool? doNotAlterReplicatedObjects) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = doNotAlterReplicatedObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that are replicated are identified during verification.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotAlterReplicatedObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotAlterReplicatedObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotAlterReplicatedObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotAlterReplicatedObjects");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectType
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectType</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectType<T>(this T toolSettings, string doNotDropObjectType) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropObjectType"] = doNotDropObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropObjectType</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>An object type that should not be dropped when DropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropObjectType<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectType");
        return toolSettings;
    }
    #endregion
    #region DoNotDropObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>DoNotDropObjectTypes</c> in existing <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T ClearDoNotDropObjectTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, params string[] doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>DoNotDropObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should not be dropped whenDropObjectsNotInSource is true. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveDoNotDropObjectTypes<T>(this T toolSettings, IEnumerable<string> doNotDropObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "DoNotDropObjectTypes", doNotDropObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region DoNotDropWorkloadClassifiers
    /// <summary>
    ///   <p><em>Sets <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>When false, WorkloadClassifiers in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetDoNotDropWorkloadClassifiers<T>(this T toolSettings, bool? doNotDropWorkloadClassifiers) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = doNotDropWorkloadClassifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>When false, WorkloadClassifiers in the target database that are not defined in the source will be dropped during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotDropWorkloadClassifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotDropWorkloadClassifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotDropWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotDropWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotDropWorkloadClassifiers");
        return toolSettings;
    }
    #endregion
    #region DoNotEvaluateSqlCmdVariables
    /// <summary>
    ///   <p><em>Sets <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether SQLCMD variables to not replace with values</p>
    /// </summary>
    [Pure]
    public static T SetDoNotEvaluateSqlCmdVariables<T>(this T toolSettings, bool? doNotEvaluateSqlCmdVariables) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = doNotEvaluateSqlCmdVariables;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether SQLCMD variables to not replace with values</p>
    /// </summary>
    [Pure]
    public static T ResetDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DoNotEvaluateSqlCmdVariables");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DoNotEvaluateSqlCmdVariables"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DoNotEvaluateSqlCmdVariables</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDoNotEvaluateSqlCmdVariables<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DoNotEvaluateSqlCmdVariables");
        return toolSettings;
    }
    #endregion
    #region DropConstraintsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropConstraintsNotInSource<T>(this T toolSettings, bool? dropConstraintsNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = dropConstraintsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether constraints that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropConstraintsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropConstraintsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropConstraintsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropConstraintsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropConstraintsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropDmlTriggersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropDmlTriggersNotInSource<T>(this T toolSettings, bool? dropDmlTriggersNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = dropDmlTriggersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether DML triggers that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropDmlTriggersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropDmlTriggersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropDmlTriggersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropDmlTriggersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropDmlTriggersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropExtendedPropertiesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropExtendedPropertiesNotInSource<T>(this T toolSettings, bool? dropExtendedPropertiesNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = dropExtendedPropertiesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropExtendedPropertiesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropExtendedPropertiesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropExtendedPropertiesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropExtendedPropertiesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropIndexesNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropIndexesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropIndexesNotInSource<T>(this T toolSettings, bool? dropIndexesNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = dropIndexesNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropIndexesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropIndexesNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropIndexesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropIndexesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropIndexesNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropIndexesNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropIndexesNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropIndexesNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropObjectsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropObjectsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T SetDropObjectsNotInSource<T>(this T toolSettings, bool? dropObjectsNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = dropObjectsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropObjectsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether objects that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database. This value takes precedence over DropExtendedProperties.</p>
    /// </summary>
    [Pure]
    public static T ResetDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropObjectsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropObjectsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropObjectsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropObjectsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropObjectsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropObjectsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropObjectsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropPermissionsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropPermissionsNotInSource<T>(this T toolSettings, bool? dropPermissionsNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = dropPermissionsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropPermissionsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropPermissionsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropPermissionsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropPermissionsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropPermissionsNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropRoleMembersNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropRoleMembersNotInSource<T>(this T toolSettings, bool? dropRoleMembersNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = dropRoleMembersNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether role members that are not defined in the database snapshot (.dacpac) file will be dropped from the target database when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropRoleMembersNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropRoleMembersNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropRoleMembersNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropRoleMembersNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropRoleMembersNotInSource");
        return toolSettings;
    }
    #endregion
    #region DropStatisticsNotInSource
    /// <summary>
    ///   <p><em>Sets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetDropStatisticsNotInSource<T>(this T toolSettings, bool? dropStatisticsNotInSource) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = dropStatisticsNotInSource;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether statistics that do not exist in the database snapshot (.dacpac) file will be dropped from the target database when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DropStatisticsNotInSource");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DropStatisticsNotInSource"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DropStatisticsNotInSource</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDropStatisticsNotInSource<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DropStatisticsNotInSource");
        return toolSettings;
    }
    #endregion
    #region EnclaveAttestationProtocol
    /// <summary>
    ///   <p><em>Sets <c>EnclaveAttestationProtocol</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies an attestation protocol to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T SetEnclaveAttestationProtocol<T>(this T toolSettings, string enclaveAttestationProtocol) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["EnclaveAttestationProtocol"] = enclaveAttestationProtocol;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>EnclaveAttestationProtocol</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies an attestation protocol to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T ResetEnclaveAttestationProtocol<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("EnclaveAttestationProtocol");
        return toolSettings;
    }
    #endregion
    #region EnclaveAttestationUrl
    /// <summary>
    ///   <p><em>Sets <c>EnclaveAttestationUrl</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the enclave attestation URL (an attestation service endpoint) to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T SetEnclaveAttestationUrl<T>(this T toolSettings, string enclaveAttestationUrl) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["EnclaveAttestationUrl"] = enclaveAttestationUrl;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>EnclaveAttestationUrl</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the enclave attestation URL (an attestation service endpoint) to be used with enclave based Always Encrypted.</p>
    /// </summary>
    [Pure]
    public static T ResetEnclaveAttestationUrl<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("EnclaveAttestationUrl");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectType
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectType</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectType<T>(this T toolSettings, string excludeObjectType) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExcludeObjectType"] = excludeObjectType;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExcludeObjectType</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>An object type that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T ResetExcludeObjectType<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectType");
        return toolSettings;
    }
    #endregion
    #region ExcludeObjectTypes
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/> to a new collection</em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T SetExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ExcludeObjectTypes</c> in existing <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T AddExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T ClearExcludeObjectTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExcludeObjectTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, params string[] excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ExcludeObjectTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>A semicolon-delimited list of object types that should be ignored during deployment. Valid object type names are Aggregates, ApplicationRoles, Assemblies, AssemblyFiles, AsymmetricKeys, BrokerPriorities, Certificates, ColumnEncryptionKeys, ColumnMasterKeys, Contracts, DatabaseOptions, DatabaseRoles, DatabaseTriggers, Defaults, ExtendedProperties, ExternalDataSources, ExternalFileFormats, ExternalTables, Filegroups, Files, FileTables, FullTextCatalogs, FullTextStoplists, MessageTypes, PartitionFunctions, PartitionSchemes, Permissions, Queues, RemoteServiceBindings, RoleMembership, Rules, ScalarValuedFunctions, SearchPropertyLists, SecurityPolicies, Sequences, Services, Signatures, StoredProcedures, SymmetricKeys, Synonyms, Tables, TableValuedFunctions, UserDefinedDataTypes, UserDefinedTableTypes, ClrUserDefinedTypes, Users, Views, XmlSchemaCollections, Audits, Credentials, CryptographicProviders, DatabaseAuditSpecifications, DatabaseEncryptionKeys, DatabaseScopedCredentials, Endpoints, ErrorMessages, EventNotifications, EventSessions, LinkedServerLogins, LinkedServers, Logins, MasterKeys, Routes, ServerAuditSpecifications, ServerRoleMembership, ServerRoles, ServerTriggers, ExternalStreams, ExternalStreamingJobs, DatabaseWorkloadGroups, WorkloadClassifiers, ExternalLibraries, ExternalLanguages.</p>
    /// </summary>
    [Pure]
    public static T RemoveExcludeObjectTypes<T>(this T toolSettings, IEnumerable<string> excludeObjectTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ExcludeObjectTypes", excludeObjectTypes, ';');
        return toolSettings;
    }
    #endregion
    #region GenerateSmartDefaults
    /// <summary>
    ///   <p><em>Sets <c>GenerateSmartDefaults</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T SetGenerateSmartDefaults<T>(this T toolSettings, bool? generateSmartDefaults) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = generateSmartDefaults;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>GenerateSmartDefaults</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Automatically provides a default value when updating a table that contains data with a column that does not allow null values.</p>
    /// </summary>
    [Pure]
    public static T ResetGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("GenerateSmartDefaults");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>GenerateSmartDefaults</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>GenerateSmartDefaults</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["GenerateSmartDefaults"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>GenerateSmartDefaults</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleGenerateSmartDefaults<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "GenerateSmartDefaults");
        return toolSettings;
    }
    #endregion
    #region HashObjectNamesInLogs
    /// <summary>
    ///   <p><em>Sets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T SetHashObjectNamesInLogs<T>(this T toolSettings, bool? hashObjectNamesInLogs) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = hashObjectNamesInLogs;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T ResetHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("HashObjectNamesInLogs");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "HashObjectNamesInLogs");
        return toolSettings;
    }
    #endregion
    #region IgnoreAnsiNulls
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAnsiNulls<T>(this T toolSettings, bool? ignoreAnsiNulls) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = ignoreAnsiNulls;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the ANSI NULLS setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAnsiNulls");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAnsiNulls"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAnsiNulls</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAnsiNulls<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAnsiNulls");
        return toolSettings;
    }
    #endregion
    #region IgnoreAuthorizer
    /// <summary>
    ///   <p><em>Sets <c>IgnoreAuthorizer</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreAuthorizer<T>(this T toolSettings, bool? ignoreAuthorizer) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = ignoreAuthorizer;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreAuthorizer</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the Authorizer should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreAuthorizer");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreAuthorizer</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreAuthorizer</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreAuthorizer"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreAuthorizer</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreAuthorizer<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreAuthorizer");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnCollation
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnCollation<T>(this T toolSettings, bool? ignoreColumnCollation) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = ignoreColumnCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the column collations should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnCollation");
        return toolSettings;
    }
    #endregion
    #region IgnoreColumnOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreColumnOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreColumnOrder<T>(this T toolSettings, bool? ignoreColumnOrder) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = ignoreColumnOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreColumnOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in table column order should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreColumnOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreColumnOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreColumnOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreColumnOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreColumnOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreColumnOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreColumnOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreComments
    /// <summary>
    ///   <p><em>Sets <c>IgnoreComments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreComments<T>(this T toolSettings, bool? ignoreComments) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = ignoreComments;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreComments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the comments should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreComments<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreComments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreComments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreComments<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreComments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreComments<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreComments"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreComments</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreComments<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreComments");
        return toolSettings;
    }
    #endregion
    #region IgnoreCryptographicProviderFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreCryptographicProviderFilePath<T>(this T toolSettings, bool? ignoreCryptographicProviderFilePath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = ignoreCryptographicProviderFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the cryptographic provider should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreCryptographicProviderFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreCryptographicProviderFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreCryptographicProviderFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreCryptographicProviderFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreDatabaseWorkloadGroups
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload groups that exist on the target during deployment.  No Database Workload Groups will be added, modified, or dropped.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDatabaseWorkloadGroups<T>(this T toolSettings, bool? ignoreDatabaseWorkloadGroups) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = ignoreDatabaseWorkloadGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload groups that exist on the target during deployment.  No Database Workload Groups will be added, modified, or dropped.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDatabaseWorkloadGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDatabaseWorkloadGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDatabaseWorkloadGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDatabaseWorkloadGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDatabaseWorkloadGroups");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerOrder<T>(this T toolSettings, bool? ignoreDdlTriggerOrder) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = ignoreDdlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database or server.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDdlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDdlTriggerState<T>(this T toolSettings, bool? ignoreDdlTriggerState) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = ignoreDdlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of Data Definition Language (DDL) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDdlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDdlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDdlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDdlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDdlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreDefaultSchema
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDefaultSchema<T>(this T toolSettings, bool? ignoreDefaultSchema) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = ignoreDefaultSchema;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the default schema should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDefaultSchema");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDefaultSchema"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDefaultSchema</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDefaultSchema<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDefaultSchema");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerOrder
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerOrder<T>(this T toolSettings, bool? ignoreDmlTriggerOrder) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = ignoreDmlTriggerOrder;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the order of Data Manipulation Language (DML) triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerOrder"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerOrder</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerOrder<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerOrder");
        return toolSettings;
    }
    #endregion
    #region IgnoreDmlTriggerState
    /// <summary>
    ///   <p><em>Sets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreDmlTriggerState<T>(this T toolSettings, bool? ignoreDmlTriggerState) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = ignoreDmlTriggerState;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the enabled or disabled state of DML triggers should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreDmlTriggerState");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreDmlTriggerState"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreDmlTriggerState</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreDmlTriggerState<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreDmlTriggerState");
        return toolSettings;
    }
    #endregion
    #region IgnoreExtendedProperties
    /// <summary>
    ///   <p><em>Sets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreExtendedProperties<T>(this T toolSettings, bool? ignoreExtendedProperties) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = ignoreExtendedProperties;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the extended properties should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreExtendedProperties");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreExtendedProperties");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileAndLogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileAndLogFilePath<T>(this T toolSettings, bool? ignoreFileAndLogFilePath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = ignoreFileAndLogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the paths for files and log files should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileAndLogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileAndLogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileAndLogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileAndLogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreFilegroupPlacement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFilegroupPlacement<T>(this T toolSettings, bool? ignoreFilegroupPlacement) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = ignoreFilegroupPlacement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the placement of objects in FILEGROUPs should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFilegroupPlacement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFilegroupPlacement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFilegroupPlacement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFilegroupPlacement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFilegroupPlacement");
        return toolSettings;
    }
    #endregion
    #region IgnoreFileSize
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFileSize<T>(this T toolSettings, bool? ignoreFileSize) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = ignoreFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file sizes should be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFileSize");
        return toolSettings;
    }
    #endregion
    #region IgnoreFillFactor
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFillFactor</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFillFactor<T>(this T toolSettings, bool? ignoreFillFactor) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = ignoreFillFactor;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFillFactor</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the fill factor for index storage should be ignored or whether a warning should be issued when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFillFactor");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFillFactor</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFillFactor</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFillFactor"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFillFactor</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFillFactor<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFillFactor");
        return toolSettings;
    }
    #endregion
    #region IgnoreFullTextCatalogFilePath
    /// <summary>
    ///   <p><em>Sets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreFullTextCatalogFilePath<T>(this T toolSettings, bool? ignoreFullTextCatalogFilePath) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = ignoreFullTextCatalogFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the file path for the full-text be ignored or whether a warning should be issued when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreFullTextCatalogFilePath"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreFullTextCatalogFilePath</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreFullTextCatalogFilePath<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreFullTextCatalogFilePath");
        return toolSettings;
    }
    #endregion
    #region IgnoreIdentitySeed
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIdentitySeed<T>(this T toolSettings, bool? ignoreIdentitySeed) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = ignoreIdentitySeed;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the seed for an identity column should be ignored or updated when you publish updates to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIdentitySeed");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIdentitySeed"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIdentitySeed</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIdentitySeed<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIdentitySeed");
        return toolSettings;
    }
    #endregion
    #region IgnoreIncrement
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIncrement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIncrement<T>(this T toolSettings, bool? ignoreIncrement) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = ignoreIncrement;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIncrement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the increment for an identity column should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIncrement");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIncrement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIncrement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIncrement"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIncrement</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIncrement<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIncrement");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexOptions<T>(this T toolSettings, bool? ignoreIndexOptions) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = ignoreIndexOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index options should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexPadding
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexPadding</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexPadding<T>(this T toolSettings, bool? ignoreIndexPadding) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = ignoreIndexPadding;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexPadding</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the index padding should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexPadding");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexPadding</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexPadding</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexPadding"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexPadding</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexPadding<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexPadding");
        return toolSettings;
    }
    #endregion
    #region IgnoreKeywordCasing
    /// <summary>
    ///   <p><em>Sets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreKeywordCasing<T>(this T toolSettings, bool? ignoreKeywordCasing) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = ignoreKeywordCasing;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the casing of keywords should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreKeywordCasing");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreKeywordCasing"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreKeywordCasing</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreKeywordCasing<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreKeywordCasing");
        return toolSettings;
    }
    #endregion
    #region IgnoreLockHintsOnIndexes
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLockHintsOnIndexes<T>(this T toolSettings, bool? ignoreLockHintsOnIndexes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = ignoreLockHintsOnIndexes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the lock hints on indexes should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLockHintsOnIndexes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLockHintsOnIndexes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLockHintsOnIndexes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLockHintsOnIndexes");
        return toolSettings;
    }
    #endregion
    #region IgnoreLoginSids
    /// <summary>
    ///   <p><em>Sets <c>IgnoreLoginSids</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreLoginSids<T>(this T toolSettings, bool? ignoreLoginSids) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = ignoreLoginSids;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreLoginSids</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the security identification number (SID) should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreLoginSids");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreLoginSids</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreLoginSids</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreLoginSids"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreLoginSids</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreLoginSids<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreLoginSids");
        return toolSettings;
    }
    #endregion
    #region IgnoreNotForReplication
    /// <summary>
    ///   <p><em>Sets <c>IgnoreNotForReplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreNotForReplication<T>(this T toolSettings, bool? ignoreNotForReplication) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = ignoreNotForReplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreNotForReplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the not for replication settings should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreNotForReplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreNotForReplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreNotForReplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreNotForReplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreNotForReplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreNotForReplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreNotForReplication");
        return toolSettings;
    }
    #endregion
    #region IgnoreObjectPlacementOnPartitionScheme
    /// <summary>
    ///   <p><em>Sets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings, bool? ignoreObjectPlacementOnPartitionScheme) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = ignoreObjectPlacementOnPartitionScheme;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether an object's placement on a partition scheme should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreObjectPlacementOnPartitionScheme"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreObjectPlacementOnPartitionScheme</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreObjectPlacementOnPartitionScheme<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreObjectPlacementOnPartitionScheme");
        return toolSettings;
    }
    #endregion
    #region IgnorePartitionSchemes
    /// <summary>
    ///   <p><em>Sets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePartitionSchemes<T>(this T toolSettings, bool? ignorePartitionSchemes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = ignorePartitionSchemes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in partition schemes and functions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePartitionSchemes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePartitionSchemes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePartitionSchemes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePartitionSchemes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePartitionSchemes");
        return toolSettings;
    }
    #endregion
    #region IgnorePermissions
    /// <summary>
    ///   <p><em>Sets <c>IgnorePermissions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePermissions<T>(this T toolSettings, bool? ignorePermissions) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = ignorePermissions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePermissions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the permissions should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePermissions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePermissions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePermissions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePermissions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePermissions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePermissions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePermissions");
        return toolSettings;
    }
    #endregion
    #region IgnoreQuotedIdentifiers
    /// <summary>
    ///   <p><em>Sets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreQuotedIdentifiers<T>(this T toolSettings, bool? ignoreQuotedIdentifiers) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = ignoreQuotedIdentifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the quoted identifiers setting should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreQuotedIdentifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreQuotedIdentifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreQuotedIdentifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreQuotedIdentifiers");
        return toolSettings;
    }
    #endregion
    #region IgnoreRoleMembership
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRoleMembership</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRoleMembership<T>(this T toolSettings, bool? ignoreRoleMembership) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = ignoreRoleMembership;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRoleMembership</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the role membership of logins should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRoleMembership");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRoleMembership</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRoleMembership</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRoleMembership"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRoleMembership</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRoleMembership<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRoleMembership");
        return toolSettings;
    }
    #endregion
    #region IgnoreRouteLifetime
    /// <summary>
    ///   <p><em>Sets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreRouteLifetime<T>(this T toolSettings, bool? ignoreRouteLifetime) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = ignoreRouteLifetime;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the amount of time that SQL Server retains the route in the routing table should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreRouteLifetime");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreRouteLifetime"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreRouteLifetime</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreRouteLifetime<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreRouteLifetime");
        return toolSettings;
    }
    #endregion
    #region IgnoreSemicolonBetweenStatements
    /// <summary>
    ///   <p><em>Sets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreSemicolonBetweenStatements<T>(this T toolSettings, bool? ignoreSemicolonBetweenStatements) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = ignoreSemicolonBetweenStatements;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the semi-colons between T-SQL statements will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSemicolonBetweenStatements"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreSemicolonBetweenStatements</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreSemicolonBetweenStatements<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreSemicolonBetweenStatements");
        return toolSettings;
    }
    #endregion
    #region IgnoreSensitivityClassifications
    /// <summary>
    ///   <p><em>Sets <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether data sensitivity classifications on columns should be ignored when comparing schema models. This only works for classifications added with the ADD SENSITIVITY CLASSIFICATION syntax introduced in SQL 2019.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreSensitivityClassifications<T>(this T toolSettings, bool? ignoreSensitivityClassifications) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = ignoreSensitivityClassifications;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether data sensitivity classifications on columns should be ignored when comparing schema models. This only works for classifications added with the ADD SENSITIVITY CLASSIFICATION syntax introduced in SQL 2019.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreSensitivityClassifications");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreSensitivityClassifications"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreSensitivityClassifications</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreSensitivityClassifications<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreSensitivityClassifications");
        return toolSettings;
    }
    #endregion
    #region IgnoreTableOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTableOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTableOptions<T>(this T toolSettings, bool? ignoreTableOptions) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = ignoreTableOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTableOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table options will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTableOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTableOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTableOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTableOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTableOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTableOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTableOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreTablePartitionOptions
    /// <summary>
    ///   <p><em>Sets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics data warehouse databases.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreTablePartitionOptions<T>(this T toolSettings, bool? ignoreTablePartitionOptions) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = ignoreTablePartitionOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the table partition options will be ignored or updated when you publish to a database.  This option applies only to Azure Synapse Analytics data warehouse databases.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreTablePartitionOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreTablePartitionOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreTablePartitionOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreTablePartitionOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreTablePartitionOptions");
        return toolSettings;
    }
    #endregion
    #region IgnoreUserSettingsObjects
    /// <summary>
    ///   <p><em>Sets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreUserSettingsObjects<T>(this T toolSettings, bool? ignoreUserSettingsObjects) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = ignoreUserSettingsObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the user settings objects will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreUserSettingsObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserSettingsObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreUserSettingsObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreUserSettingsObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreUserSettingsObjects");
        return toolSettings;
    }
    #endregion
    #region IgnoreWhitespace
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWhitespace</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWhitespace<T>(this T toolSettings, bool? ignoreWhitespace) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = ignoreWhitespace;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWhitespace</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in white space will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWhitespace");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWhitespace</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWhitespace</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWhitespace"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWhitespace</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWhitespace<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWhitespace");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnCheckConstraints
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings, bool? ignoreWithNocheckOnCheckConstraints) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = ignoreWithNocheckOnCheckConstraints;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for check constraints will be ignored or updated when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnCheckConstraints"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnCheckConstraints</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnCheckConstraints<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnCheckConstraints");
        return toolSettings;
    }
    #endregion
    #region IgnoreWithNocheckOnForeignKeys
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings, bool? ignoreWithNocheckOnForeignKeys) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = ignoreWithNocheckOnForeignKeys;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the value of the WITH NOCHECK clause for foreign keys will be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWithNocheckOnForeignKeys"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWithNocheckOnForeignKeys</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWithNocheckOnForeignKeys<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWithNocheckOnForeignKeys");
        return toolSettings;
    }
    #endregion
    #region IgnoreWorkloadClassifiers
    /// <summary>
    ///   <p><em>Sets <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload classifiers that exist on the target during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreWorkloadClassifiers<T>(this T toolSettings, bool? ignoreWorkloadClassifiers) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = ignoreWorkloadClassifiers;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether to exclude workload classifiers that exist on the target during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreWorkloadClassifiers");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreWorkloadClassifiers"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreWorkloadClassifiers</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreWorkloadClassifiers<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreWorkloadClassifiers");
        return toolSettings;
    }
    #endregion
    #region IncludeCompositeObjects
    /// <summary>
    ///   <p><em>Sets <c>IncludeCompositeObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeCompositeObjects<T>(this T toolSettings, bool? includeCompositeObjects) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = includeCompositeObjects;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeCompositeObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Include all composite elements with the same database as part of a single publish operation.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeCompositeObjects");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeCompositeObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeCompositeObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeCompositeObjects"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeCompositeObjects</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeCompositeObjects<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeCompositeObjects");
        return toolSettings;
    }
    #endregion
    #region IncludeTransactionalScripts
    /// <summary>
    ///   <p><em>Sets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetIncludeTransactionalScripts<T>(this T toolSettings, bool? includeTransactionalScripts) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = includeTransactionalScripts;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether transactional statements should be used where possible when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IncludeTransactionalScripts");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IncludeTransactionalScripts"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IncludeTransactionalScripts</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIncludeTransactionalScripts<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IncludeTransactionalScripts");
        return toolSettings;
    }
    #endregion
    #region IsAlwaysEncryptedParameterizationEnabled
    /// <summary>
    ///   <p><em>Sets <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Enables variable parameterization on Always Encrypted columns in pre/post deployment scripts.</p>
    /// </summary>
    [Pure]
    public static T SetIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings, bool? isAlwaysEncryptedParameterizationEnabled) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = isAlwaysEncryptedParameterizationEnabled;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Enables variable parameterization on Always Encrypted columns in pre/post deployment scripts.</p>
    /// </summary>
    [Pure]
    public static T ResetIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IsAlwaysEncryptedParameterizationEnabled");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IsAlwaysEncryptedParameterizationEnabled"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IsAlwaysEncryptedParameterizationEnabled</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIsAlwaysEncryptedParameterizationEnabled<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IsAlwaysEncryptedParameterizationEnabled");
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region NoAlterStatementsToChangeClrTypes
    /// <summary>
    ///   <p><em>Sets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T SetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings, bool? noAlterStatementsToChangeClrTypes) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = noAlterStatementsToChangeClrTypes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies that publish should always drop and re-create an assembly if there is a difference instead of issuing an ALTER ASSEMBLY statement.</p>
    /// </summary>
    [Pure]
    public static T ResetNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["NoAlterStatementsToChangeClrTypes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>NoAlterStatementsToChangeClrTypes</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleNoAlterStatementsToChangeClrTypes<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "NoAlterStatementsToChangeClrTypes");
        return toolSettings;
    }
    #endregion
    #region PopulateFilesOnFileGroups
    /// <summary>
    ///   <p><em>Sets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T SetPopulateFilesOnFileGroups<T>(this T toolSettings, bool? populateFilesOnFileGroups) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = populateFilesOnFileGroups;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether a new file is also created when a new FileGroup is created in the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetPopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PopulateFilesOnFileGroups");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PopulateFilesOnFileGroups"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PopulateFilesOnFileGroups</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePopulateFilesOnFileGroups<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PopulateFilesOnFileGroups");
        return toolSettings;
    }
    #endregion
    #region PreserveIdentityLastValues
    /// <summary>
    ///   <p><em>Sets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetPreserveIdentityLastValues<T>(this T toolSettings, bool? preserveIdentityLastValues) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = preserveIdentityLastValues;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetPreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PreserveIdentityLastValues");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PreserveIdentityLastValues");
        return toolSettings;
    }
    #endregion
    #region RegisterDataTierApplication
    /// <summary>
    ///   <p><em>Sets <c>RegisterDataTierApplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T SetRegisterDataTierApplication<T>(this T toolSettings, bool? registerDataTierApplication) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = registerDataTierApplication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RegisterDataTierApplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether the schema is registered with the database server.</p>
    /// </summary>
    [Pure]
    public static T ResetRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RegisterDataTierApplication");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RegisterDataTierApplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RegisterDataTierApplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RegisterDataTierApplication"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RegisterDataTierApplication</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRegisterDataTierApplication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RegisterDataTierApplication");
        return toolSettings;
    }
    #endregion
    #region RestoreSequenceCurrentValue
    /// <summary>
    ///   <p><em>Sets <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether sequence object current value should be deployed with dacpac file, the default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetRestoreSequenceCurrentValue<T>(this T toolSettings, bool? restoreSequenceCurrentValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = restoreSequenceCurrentValue;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether sequence object current value should be deployed with dacpac file, the default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RestoreSequenceCurrentValue");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RestoreSequenceCurrentValue"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RestoreSequenceCurrentValue</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRestoreSequenceCurrentValue<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RestoreSequenceCurrentValue");
        return toolSettings;
    }
    #endregion
    #region RunDeploymentPlanExecutors
    /// <summary>
    ///   <p><em>Sets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T SetRunDeploymentPlanExecutors<T>(this T toolSettings, bool? runDeploymentPlanExecutors) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = runDeploymentPlanExecutors;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.</p>
    /// </summary>
    [Pure]
    public static T ResetRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RunDeploymentPlanExecutors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RunDeploymentPlanExecutors"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RunDeploymentPlanExecutors</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRunDeploymentPlanExecutors<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RunDeploymentPlanExecutors");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCollation
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCollation<T>(this T toolSettings, bool? scriptDatabaseCollation) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = scriptDatabaseCollation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database collation should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCollation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCollation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCollation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCollation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCollation");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseCompatibility
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseCompatibility<T>(this T toolSettings, bool? scriptDatabaseCompatibility) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = scriptDatabaseCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether differences in the database compatibility should be ignored or updated when you publish to a database.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseCompatibility");
        return toolSettings;
    }
    #endregion
    #region ScriptDatabaseOptions
    /// <summary>
    ///   <p><em>Sets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDatabaseOptions<T>(this T toolSettings, bool? scriptDatabaseOptions) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = scriptDatabaseOptions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether target database properties should be set or updated as part of the publish action.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDatabaseOptions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDatabaseOptions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDatabaseOptions</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDatabaseOptions<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDatabaseOptions");
        return toolSettings;
    }
    #endregion
    #region ScriptDeployStateChecks
    /// <summary>
    ///   <p><em>Sets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T SetScriptDeployStateChecks<T>(this T toolSettings, bool? scriptDeployStateChecks) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = scriptDeployStateChecks;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether statements are generated in the publish script to verify that the database name and server name match the names specified in the database project.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptDeployStateChecks");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptDeployStateChecks"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptDeployStateChecks</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptDeployStateChecks<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptDeployStateChecks");
        return toolSettings;
    }
    #endregion
    #region ScriptFileSize
    /// <summary>
    ///   <p><em>Sets <c>ScriptFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T SetScriptFileSize<T>(this T toolSettings, bool? scriptFileSize) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = scriptFileSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Controls whether size is specified when adding a file to a filegroup.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptFileSize");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptFileSize"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptFileSize</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptFileSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptFileSize");
        return toolSettings;
    }
    #endregion
    #region ScriptNewConstraintValidation
    /// <summary>
    ///   <p><em>Sets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T SetScriptNewConstraintValidation<T>(this T toolSettings, bool? scriptNewConstraintValidation) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = scriptNewConstraintValidation;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>At the end of publish all of the constraints will be verified as one set, avoiding data errors caused by a check or foreign key constraint in the middle of publish. If set to False, your constraints are published without checking the corresponding data.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptNewConstraintValidation");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptNewConstraintValidation"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptNewConstraintValidation</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptNewConstraintValidation<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptNewConstraintValidation");
        return toolSettings;
    }
    #endregion
    #region ScriptRefreshModule
    /// <summary>
    ///   <p><em>Sets <c>ScriptRefreshModule</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T SetScriptRefreshModule<T>(this T toolSettings, bool? scriptRefreshModule) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = scriptRefreshModule;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ScriptRefreshModule</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Include refresh statements at the end of the publish script.</p>
    /// </summary>
    [Pure]
    public static T ResetScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ScriptRefreshModule");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ScriptRefreshModule</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ScriptRefreshModule</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ScriptRefreshModule"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ScriptRefreshModule</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleScriptRefreshModule<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ScriptRefreshModule");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage may be required and is only available for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #region TreatVerificationErrorsAsWarnings
    /// <summary>
    ///   <p><em>Sets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T SetTreatVerificationErrorsAsWarnings<T>(this T toolSettings, bool? treatVerificationErrorsAsWarnings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = treatVerificationErrorsAsWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether errors encountered during publish verification should be treated as warnings. The check is performed against the generated deployment plan before the plan is executed against your target database. Plan verification detects problems such as the loss of target-only objects (such as indexes) that must be dropped to make a change. Verification will also detect situations where dependencies (such as a table or view) exist because of a reference to a composite project, but do not exist in the target database. You might choose to do this to get a complete list of all issues, instead of having the publish action stop on the first error.</p>
    /// </summary>
    [Pure]
    public static T ResetTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TreatVerificationErrorsAsWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>TreatVerificationErrorsAsWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleTreatVerificationErrorsAsWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "TreatVerificationErrorsAsWarnings");
        return toolSettings;
    }
    #endregion
    #region UnmodifiableObjectWarnings
    /// <summary>
    ///   <p><em>Sets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T SetUnmodifiableObjectWarnings<T>(this T toolSettings, bool? unmodifiableObjectWarnings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = unmodifiableObjectWarnings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether warnings should be generated when differences are found in objects that cannot be modified, for example, if the file size or file paths were different for a file.</p>
    /// </summary>
    [Pure]
    public static T ResetUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("UnmodifiableObjectWarnings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["UnmodifiableObjectWarnings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>UnmodifiableObjectWarnings</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleUnmodifiableObjectWarnings<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "UnmodifiableObjectWarnings");
        return toolSettings;
    }
    #endregion
    #region VerifyCollationCompatibility
    /// <summary>
    ///   <p><em>Sets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyCollationCompatibility<T>(this T toolSettings, bool? verifyCollationCompatibility) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = verifyCollationCompatibility;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether collation compatibility is verified.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyCollationCompatibility");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyCollationCompatibility"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyCollationCompatibility</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyCollationCompatibility<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyCollationCompatibility");
        return toolSettings;
    }
    #endregion
    #region VerifyDeployment
    /// <summary>
    ///   <p><em>Sets <c>VerifyDeployment</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyDeployment<T>(this T toolSettings, bool? verifyDeployment) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = verifyDeployment;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyDeployment</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies whether checks should be performed before publishing that will stop the publish action if issues are present that might block successful publishing. For example, your publish action might stop if you have foreign keys on the target database that do not exist in the database project, and that causes errors when you publish.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyDeployment<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyDeployment");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyDeployment</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyDeployment<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyDeployment</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyDeployment<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyDeployment"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyDeployment</c> in <see cref="SqlPackageScriptSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-script-action); {PropertyValue}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyDeployment<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyDeployment");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region ReferencePaths
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.ReferencePaths"/> to a new dictionary</em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T SetReferencePaths<T>(this T toolSettings, IDictionary<string, object> referencePaths) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal = referencePaths.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageScriptSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T ClearReferencePaths<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageScriptSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T AddReferencePath<T>(this T toolSettings, string referencePathKey, object referencePathValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Add(referencePathKey, referencePathValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageScriptSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T RemoveReferencePath<T>(this T toolSettings, string referencePathKey) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal.Remove(referencePathKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageScriptSettings.ReferencePaths"/></em></p>
    ///   <p>Specifies the additional directories to search for .dacpac references.</p>
    /// </summary>
    [Pure]
    public static T SetReferencePath<T>(this T toolSettings, string referencePathKey, object referencePathValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ReferencePathsInternal[referencePathKey] = referencePathValue;
        return toolSettings;
    }
    #endregion
    #region SourceFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action. If this parameter is used, no other source parameter shall be valid.</p>
    /// </summary>
    [Pure]
    public static T SetSourceFile<T>(this T toolSettings, string sourceFile) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = sourceFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action. If this parameter is used, no other source parameter shall be valid.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceFile<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = null;
        return toolSettings;
    }
    #endregion
    #region SourceConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T SetSourceConnectionString<T>(this T toolSettings, string sourceConnectionString) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = sourceConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceConnectionString<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region SourceDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceDatabaseName<T>(this T toolSettings, string sourceDatabaseName) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = sourceDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceDatabaseName<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region SourceEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetSourceEncryptConnection<T>(this T toolSettings, EncryptionType sourceEncryptConnection) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = sourceEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region SourceHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetSourceHostNameInCertificate<T>(this T toolSettings, string sourceHostNameInCertificate) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = sourceHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region SourcePassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourcePassword<T>(this T toolSettings, string sourcePassword) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = sourcePassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourcePassword<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = null;
        return toolSettings;
    }
    #endregion
    #region SourceServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceServerName<T>(this T toolSettings, string sourceServerName) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = sourceServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceServerName<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = null;
        return toolSettings;
    }
    #endregion
    #region SourceTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTimeout<T>(this T toolSettings, int? sourceTimeout) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = sourceTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTimeout<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = null;
        return toolSettings;
    }
    #endregion
    #region SourceTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTrustServerCertificate<T>(this T toolSettings, bool? sourceTrustServerCertificate) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = sourceTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = !toolSettings.SourceTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region SourceUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceUser<T>(this T toolSettings, string sourceUser) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = sourceUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceUser<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = null;
        return toolSettings;
    }
    #endregion
    #region TargetFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T SetTargetFile<T>(this T toolSettings, string targetFile) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = targetFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetFile<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = null;
        return toolSettings;
    }
    #endregion
    #region TargetConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T SetTargetConnectionString<T>(this T toolSettings, string targetConnectionString) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = targetConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetConnectionString<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region TargetDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T SetTargetDatabaseName<T>(this T toolSettings, string targetDatabaseName) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = targetDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetDatabaseName<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region TargetEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEncryptConnection<T>(this T toolSettings, EncryptionType targetEncryptConnection) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = targetEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region TargetHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetTargetHostNameInCertificate<T>(this T toolSettings, string targetHostNameInCertificate) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = targetHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region TargetPassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetPassword<T>(this T toolSettings, string targetPassword) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = targetPassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetPassword<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = null;
        return toolSettings;
    }
    #endregion
    #region TargetServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetServerName<T>(this T toolSettings, string targetServerName) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = targetServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetServerName<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = null;
        return toolSettings;
    }
    #endregion
    #region TargetTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTimeout<T>(this T toolSettings, int? targetTimeout) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = targetTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTimeout<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = null;
        return toolSettings;
    }
    #endregion
    #region TargetTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTrustServerCertificate<T>(this T toolSettings, bool? targetTrustServerCertificate) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = targetTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = !toolSettings.TargetTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region TargetUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetUser<T>(this T toolSettings, string targetUser) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = targetUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetUser<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region ThreadMaxStackSize
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T SetThreadMaxStackSize<T>(this T toolSettings, int? threadMaxStackSize) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = threadMaxStackSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T ResetThreadMaxStackSize<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageScriptSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
    #region Variables
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageScriptSettings.Variables"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariables<T>(this T toolSettings, IDictionary<string, object> variables) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageScriptSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T ClearVariables<T>(this T toolSettings) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageScriptSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T AddVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Add(variableKey, variableValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageScriptSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T RemoveVariable<T>(this T toolSettings, string variableKey) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal.Remove(variableKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageScriptSettings.Variables"/></em></p>
    ///   <p>Specifies a name value pair for an action-specific variable;{VariableName}={Value}. The DACPAC file contains the list of valid SQLCMD variables. An error results if a value is not provided for every variable.</p>
    /// </summary>
    [Pure]
    public static T SetVariable<T>(this T toolSettings, string variableKey, object variableValue) where T : SqlPackageScriptSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.VariablesInternal[variableKey] = variableValue;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageImportSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageImportSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region AzureCloudConfig
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T SetAzureCloudConfig<T>(this T toolSettings, string azureCloudConfig) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = azureCloudConfig;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T ResetAzureCloudConfig<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageImportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageImportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageImportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region ModelFilePath
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T SetModelFilePath<T>(this T toolSettings, string modelFilePath) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = modelFilePath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.ModelFilePath"/></em></p>
    ///   <p>Specifies the file path to override the model.xml in the source file. Use of this setting may result in deployment failure and/or unintended data loss. This setting is intended only for use when troubleshooting issues with publish, import, or script generation.</p>
    /// </summary>
    [Pure]
    public static T ResetModelFilePath<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ModelFilePath = null;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region DatabaseEdition
    /// <summary>
    ///   <p><em>Sets <c>DatabaseEdition</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseEdition<T>(this T toolSettings, DatabaseEdition databaseEdition) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseEdition"] = databaseEdition;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseEdition</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the edition of an Azure SQL Database. See [Azure SQL Database service tiers](/azure/azure-sql/database/service-tiers-general-purpose-business-critical).</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseEdition<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseEdition");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region DatabaseMaximumSize
    /// <summary>
    ///   <p><em>Sets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseMaximumSize<T>(this T toolSettings, int? databaseMaximumSize) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseMaximumSize"] = databaseMaximumSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseMaximumSize</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the maximum size in GB of an Azure SQL Database.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseMaximumSize<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseMaximumSize");
        return toolSettings;
    }
    #endregion
    #region DatabaseServiceObjective
    /// <summary>
    ///   <p><em>Sets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseServiceObjective<T>(this T toolSettings, string databaseServiceObjective) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseServiceObjective"] = databaseServiceObjective;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseServiceObjective</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Defines the performance level of an Azure SQL Database such as "P0" or "S1".</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseServiceObjective<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseServiceObjective");
        return toolSettings;
    }
    #endregion
    #region DisableIndexesForDataPhase
    /// <summary>
    ///   <p><em>Sets <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>When true (default), disables indexes before importing data. When false, indexes are not rebuilt.</p>
    /// </summary>
    [Pure]
    public static T SetDisableIndexesForDataPhase<T>(this T toolSettings, bool? disableIndexesForDataPhase) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = disableIndexesForDataPhase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>When true (default), disables indexes before importing data. When false, indexes are not rebuilt.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableIndexesForDataPhase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableIndexesForDataPhase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableIndexesForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableIndexesForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableIndexesForDataPhase");
        return toolSettings;
    }
    #endregion
    #region DisableParallelismForEnablingIndexes
    /// <summary>
    ///   <p><em>Sets <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Not using parallelism when rebuilding indexes while importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetDisableParallelismForEnablingIndexes<T>(this T toolSettings, bool? disableParallelismForEnablingIndexes) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = disableParallelismForEnablingIndexes;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Not using parallelism when rebuilding indexes while importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DisableParallelismForEnablingIndexes");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DisableParallelismForEnablingIndexes"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>DisableParallelismForEnablingIndexes</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleDisableParallelismForEnablingIndexes<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "DisableParallelismForEnablingIndexes");
        return toolSettings;
    }
    #endregion
    #region HashObjectNamesInLogs
    /// <summary>
    ///   <p><em>Sets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T SetHashObjectNamesInLogs<T>(this T toolSettings, bool? hashObjectNamesInLogs) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = hashObjectNamesInLogs;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T ResetHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("HashObjectNamesInLogs");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "HashObjectNamesInLogs");
        return toolSettings;
    }
    #endregion
    #region ImportContributorArguments
    /// <summary>
    ///   <p><em>Sets <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributorArguments<T>(this T toolSettings, params string[] importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributorArguments<T>(this T toolSettings, IEnumerable<string> importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributorArguments<T>(this T toolSettings, params string[] importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributorArguments</c> in existing <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributorArguments<T>(this T toolSettings, IEnumerable<string> importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearImportContributorArguments<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ImportContributorArguments");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributorArguments<T>(this T toolSettings, params string[] importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributorArguments</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies deployment contributor arguments for the deployment contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributorArguments<T>(this T toolSettings, IEnumerable<string> importContributorArguments) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributorArguments", importContributorArguments, ';');
        return toolSettings;
    }
    #endregion
    #region ImportContributorPaths
    /// <summary>
    ///   <p><em>Sets <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributorPaths<T>(this T toolSettings, params string[] importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributorPaths<T>(this T toolSettings, IEnumerable<string> importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributorPaths<T>(this T toolSettings, params string[] importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributorPaths</c> in existing <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributorPaths<T>(this T toolSettings, IEnumerable<string> importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T ClearImportContributorPaths<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ImportContributorPaths");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributorPaths<T>(this T toolSettings, params string[] importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributorPaths</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies paths to load additional import contributors. This property should be a semi-colon delimited list of values.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributorPaths<T>(this T toolSettings, IEnumerable<string> importContributorPaths) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributorPaths", importContributorPaths, ';');
        return toolSettings;
    }
    #endregion
    #region ImportContributors
    /// <summary>
    ///   <p><em>Sets <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributors<T>(this T toolSettings, params string[] importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/> to a new collection</em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T SetImportContributors<T>(this T toolSettings, IEnumerable<string> importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.SetCollection(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributors<T>(this T toolSettings, params string[] importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds values to <c>ImportContributors</c> in existing <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T AddImportContributors<T>(this T toolSettings, IEnumerable<string> importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.AddItems(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T ClearImportContributors<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ImportContributors");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributors<T>(this T toolSettings, params string[] importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes values from <c>ImportContributors</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the deployment contributors, which should run when the bacpac is imported. This property should be a semi-colon delimited list of fully qualified build contributor names or IDs.</p>
    /// </summary>
    [Pure]
    public static T RemoveImportContributors<T>(this T toolSettings, IEnumerable<string> importContributors) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.RemoveItems(toolSettings.PropertiesInternal, "ImportContributors", importContributors, ';');
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region PreserveIdentityLastValues
    /// <summary>
    ///   <p><em>Sets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T SetPreserveIdentityLastValues<T>(this T toolSettings, bool? preserveIdentityLastValues) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = preserveIdentityLastValues;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies whether last values for identity columns should be preserved during deployment.</p>
    /// </summary>
    [Pure]
    public static T ResetPreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("PreserveIdentityLastValues");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisablePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["PreserveIdentityLastValues"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>PreserveIdentityLastValues</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T TogglePreserveIdentityLastValues<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "PreserveIdentityLastValues");
        return toolSettings;
    }
    #endregion
    #region RebuildIndexesOfflineForDataPhase
    /// <summary>
    ///   <p><em>Sets <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>When true, rebuilds indexes offline after importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetRebuildIndexesOfflineForDataPhase<T>(this T toolSettings, bool? rebuildIndexesOfflineForDataPhase) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = rebuildIndexesOfflineForDataPhase;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>When true, rebuilds indexes offline after importing data into SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("RebuildIndexesOfflineForDataPhase");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["RebuildIndexesOfflineForDataPhase"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>RebuildIndexesOfflineForDataPhase</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-import-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleRebuildIndexesOfflineForDataPhase<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "RebuildIndexesOfflineForDataPhase");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage is required.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackageImportSettings.Properties"/></em></p>
    ///   <p>Specifies how elements are stored when building the database model. For performance reasons the default is InMemory. For large databases, File backed storage is required.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageImportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageImportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageImportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region SourceFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action from local storage. If this parameter is used, no other source parameter shall be valid.</p>
    /// </summary>
    [Pure]
    public static T SetSourceFile<T>(this T toolSettings, string sourceFile) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = sourceFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.SourceFile"/></em></p>
    ///   <p>Specifies a source file to be used as the source of action from local storage. If this parameter is used, no other source parameter shall be valid.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceFile<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceFile = null;
        return toolSettings;
    }
    #endregion
    #region TargetConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T SetTargetConnectionString<T>(this T toolSettings, string targetConnectionString) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = targetConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the target database. If this parameter is specified, it shall be used exclusively of all other target parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetConnectionString<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region TargetDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T SetTargetDatabaseName<T>(this T toolSettings, string targetDatabaseName) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = targetDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetDatabaseName"/></em></p>
    ///   <p>Specifies an override for the name of the database that is the target of SqlPackage Action.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetDatabaseName<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region TargetEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEncryptConnection<T>(this T toolSettings, EncryptionType targetEncryptConnection) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = targetEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the target database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEncryptConnection<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region TargetHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetTargetHostNameInCertificate<T>(this T toolSettings, string targetHostNameInCertificate) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = targetHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the target SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region TargetPassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetPassword<T>(this T toolSettings, string targetPassword) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = targetPassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetPassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetPassword<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetPassword = null;
        return toolSettings;
    }
    #endregion
    #region TargetServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetServerName<T>(this T toolSettings, string targetServerName) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = targetServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetServerName<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetServerName = null;
        return toolSettings;
    }
    #endregion
    #region TargetTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTimeout<T>(this T toolSettings, int? targetTimeout) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = targetTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the target database in seconds. For Azure AD, it is recommended that this value be greater than or equal to 30 seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTimeout<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTimeout = null;
        return toolSettings;
    }
    #endregion
    #region TargetTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetTargetTrustServerCertificate<T>(this T toolSettings, bool? targetTrustServerCertificate) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = targetTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageImportSettings.TargetTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the target database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleTargetTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetTrustServerCertificate = !toolSettings.TargetTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region TargetUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T SetTargetUser<T>(this T toolSettings, string targetUser) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = targetUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TargetUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetUser<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetUser = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region ThreadMaxStackSize
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T SetThreadMaxStackSize<T>(this T toolSettings, int? threadMaxStackSize) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = threadMaxStackSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T ResetThreadMaxStackSize<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageImportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageImportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageImportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageImportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageImportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageImportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageExportSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageExportSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token-based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region AzureCloudConfig
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T SetAzureCloudConfig<T>(this T toolSettings, string azureCloudConfig) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = azureCloudConfig;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T ResetAzureCloudConfig<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExportSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExportSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region CompressionOption
    /// <summary>
    ///   <p><em>Sets <c>CompressionOption</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the type of compression.</p>
    /// </summary>
    [Pure]
    public static T SetCompressionOption<T>(this T toolSettings, CompressionOption compressionOption) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompressionOption"] = compressionOption;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CompressionOption</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the type of compression.</p>
    /// </summary>
    [Pure]
    public static T ResetCompressionOption<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CompressionOption");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region HashObjectNamesInLogs
    /// <summary>
    ///   <p><em>Sets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T SetHashObjectNamesInLogs<T>(this T toolSettings, bool? hashObjectNamesInLogs) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = hashObjectNamesInLogs;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T ResetHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("HashObjectNamesInLogs");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "HashObjectNamesInLogs");
        return toolSettings;
    }
    #endregion
    #region IgnoreIndexesStatisticsOnEnclaveEnabledColumns
    /// <summary>
    ///   <p><em>Sets <c>IgnoreIndexesStatisticsOnEnclaveEnabledColumns</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes or statistics on columns encrypted using randomized encryption and enclave-enabled column encryption keys should be ignored (not included in the generated bacpac). By default (false) any index or a statistic on a column encrypted using randomized encryption and an enclave-enabled column encryption key will block the export action.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreIndexesStatisticsOnEnclaveEnabledColumns<T>(this T toolSettings, bool? ignoreIndexesStatisticsOnEnclaveEnabledColumns) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexesStatisticsOnEnclaveEnabledColumns"] = ignoreIndexesStatisticsOnEnclaveEnabledColumns;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreIndexesStatisticsOnEnclaveEnabledColumns</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether indexes or statistics on columns encrypted using randomized encryption and enclave-enabled column encryption keys should be ignored (not included in the generated bacpac). By default (false) any index or a statistic on a column encrypted using randomized encryption and an enclave-enabled column encryption key will block the export action.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreIndexesStatisticsOnEnclaveEnabledColumns<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreIndexesStatisticsOnEnclaveEnabledColumns");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreIndexesStatisticsOnEnclaveEnabledColumns</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreIndexesStatisticsOnEnclaveEnabledColumns<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexesStatisticsOnEnclaveEnabledColumns"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreIndexesStatisticsOnEnclaveEnabledColumns</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreIndexesStatisticsOnEnclaveEnabledColumns<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreIndexesStatisticsOnEnclaveEnabledColumns"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreIndexesStatisticsOnEnclaveEnabledColumns</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreIndexesStatisticsOnEnclaveEnabledColumns<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreIndexesStatisticsOnEnclaveEnabledColumns");
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the type of backing storage for the schema model used during extraction. 'Memory' is default for .NET Core version of SqlPackage. 'File' is only available and default for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies the type of backing storage for the schema model used during extraction. 'Memory' is default for .NET Core version of SqlPackage. 'File' is only available and default for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #region TableData
    /// <summary>
    ///   <p><em>Sets <c>TableData</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Indicates the table from which data will be extracted. Specify the table name with or without the brackets surrounding the name parts in the following format: schema_name.table_identifier. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetTableData<T>(this T toolSettings, string tableData) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TableData"] = tableData;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TableData</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Indicates the table from which data will be extracted. Specify the table name with or without the brackets surrounding the name parts in the following format: schema_name.table_identifier. This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetTableData<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TableData");
        return toolSettings;
    }
    #endregion
    #region TargetEngineVersion
    /// <summary>
    ///   <p><em>Sets <c>TargetEngineVersion</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>This property is deprecated and use is not recommended. Specifies the version the target engine for Azure SQL Database is expected to be.</p>
    /// </summary>
    [Pure]
    public static T SetTargetEngineVersion<T>(this T toolSettings, TargetEngineVersion targetEngineVersion) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TargetEngineVersion"] = targetEngineVersion;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TargetEngineVersion</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>This property is deprecated and use is not recommended. Specifies the version the target engine for Azure SQL Database is expected to be.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetEngineVersion<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TargetEngineVersion");
        return toolSettings;
    }
    #endregion
    #region TempDirectoryForTableData
    /// <summary>
    ///   <p><em>Sets <c>TempDirectoryForTableData</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies an alternative temporary directory used to buffer table data before being written to the package file. The space required in this location may be large and is relative to the full size of the database.</p>
    /// </summary>
    [Pure]
    public static T SetTempDirectoryForTableData<T>(this T toolSettings, string tempDirectoryForTableData) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TempDirectoryForTableData"] = tempDirectoryForTableData;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TempDirectoryForTableData</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies an alternative temporary directory used to buffer table data before being written to the package file. The space required in this location may be large and is relative to the full size of the database.</p>
    /// </summary>
    [Pure]
    public static T ResetTempDirectoryForTableData<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TempDirectoryForTableData");
        return toolSettings;
    }
    #endregion
    #region VerifyExtraction
    /// <summary>
    ///   <p><em>Sets <c>VerifyExtraction</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the extracted schema model should be verified. If set to true, schema validation rules are run on the dacpac or bacpac.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyExtraction<T>(this T toolSettings, bool? verifyExtraction) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = verifyExtraction;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyExtraction</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the extracted schema model should be verified. If set to true, schema validation rules are run on the dacpac or bacpac.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyExtraction");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyExtraction</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyExtraction</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyExtraction</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyExtraction");
        return toolSettings;
    }
    #endregion
    #region VerifyFullTextDocumentTypesSupported
    /// <summary>
    ///   <p><em>Sets <c>VerifyFullTextDocumentTypesSupported</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the supported full-text document types for Microsoft Azure SQL Database v12 should be verified.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyFullTextDocumentTypesSupported<T>(this T toolSettings, bool? verifyFullTextDocumentTypesSupported) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyFullTextDocumentTypesSupported"] = verifyFullTextDocumentTypesSupported;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyFullTextDocumentTypesSupported</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies whether the supported full-text document types for Microsoft Azure SQL Database v12 should be verified.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyFullTextDocumentTypesSupported<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyFullTextDocumentTypesSupported");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyFullTextDocumentTypesSupported</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyFullTextDocumentTypesSupported<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyFullTextDocumentTypesSupported"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyFullTextDocumentTypesSupported</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyFullTextDocumentTypesSupported<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyFullTextDocumentTypesSupported"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyFullTextDocumentTypesSupported</c> in <see cref="SqlPackageExportSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-export-action);{PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyFullTextDocumentTypesSupported<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyFullTextDocumentTypesSupported");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExportSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region SourceConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T SetSourceConnectionString<T>(this T toolSettings, string sourceConnectionString) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = sourceConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceConnectionString<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region SourceDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceDatabaseName<T>(this T toolSettings, string sourceDatabaseName) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = sourceDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceDatabaseName<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region SourceEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetSourceEncryptConnection<T>(this T toolSettings, EncryptionType sourceEncryptConnection) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = sourceEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region SourceHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetSourceHostNameInCertificate<T>(this T toolSettings, string sourceHostNameInCertificate) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = sourceHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region SourcePassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourcePassword<T>(this T toolSettings, string sourcePassword) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = sourcePassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourcePassword<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = null;
        return toolSettings;
    }
    #endregion
    #region SourceServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceServerName<T>(this T toolSettings, string sourceServerName) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = sourceServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceServerName<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = null;
        return toolSettings;
    }
    #endregion
    #region SourceTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTimeout<T>(this T toolSettings, int? sourceTimeout) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = sourceTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTimeout<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = null;
        return toolSettings;
    }
    #endregion
    #region SourceTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTrustServerCertificate<T>(this T toolSettings, bool? sourceTrustServerCertificate) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = sourceTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExportSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = !toolSettings.SourceTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region SourceUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceUser<T>(this T toolSettings, string sourceUser) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = sourceUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceUser<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = null;
        return toolSettings;
    }
    #endregion
    #region TargetFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T SetTargetFile<T>(this T toolSettings, string targetFile) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = targetFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetFile<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region ThreadMaxStackSize
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T SetThreadMaxStackSize<T>(this T toolSettings, int? threadMaxStackSize) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = threadMaxStackSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T ResetThreadMaxStackSize<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExportSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExportSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
}
#endregion
#region SqlPackageExtractSettingsExtensions
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class SqlPackageExtractSettingsExtensions
{
    #region AccessToken
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T SetAccessToken<T>(this T toolSettings, string accessToken) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = accessToken;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.AccessToken"/></em></p>
    ///   <p>Specifies the token based authentication access token to use when connect to the target database.</p>
    /// </summary>
    [Pure]
    public static T ResetAccessToken<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AccessToken = null;
        return toolSettings;
    }
    #endregion
    #region AzureCloudConfig
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T SetAzureCloudConfig<T>(this T toolSettings, string azureCloudConfig) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = azureCloudConfig;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.AzureCloudConfig"/></em></p>
    ///   <p>Specifies the custom endpoints for connecting to Azure Active Directory in the format: AzureActiveDirectoryAuthority={value};DatabaseServicePrincipalName={value}" .</p>
    /// </summary>
    [Pure]
    public static T ResetAzureCloudConfig<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.AzureCloudConfig = null;
        return toolSettings;
    }
    #endregion
    #region Diagnostics
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnostics<T>(this T toolSettings, bool? diagnostics) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = diagnostics;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnostics<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExtractSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableDiagnostics<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExtractSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableDiagnostics<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExtractSettings.Diagnostics"/></em></p>
    ///   <p>Specifies whether diagnostic logging is output to the console. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleDiagnostics<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Diagnostics = !toolSettings.Diagnostics;
        return toolSettings;
    }
    #endregion
    #region DiagnosticsFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T SetDiagnosticsFile<T>(this T toolSettings, string diagnosticsFile) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = diagnosticsFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.DiagnosticsFile"/></em></p>
    ///   <p>Specifies a file to store diagnostic logs.</p>
    /// </summary>
    [Pure]
    public static T ResetDiagnosticsFile<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.DiagnosticsFile = null;
        return toolSettings;
    }
    #endregion
    #region MaxParallelism
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T SetMaxParallelism<T>(this T toolSettings, int? maxParallelism) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = maxParallelism;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.MaxParallelism"/></em></p>
    ///   <p>Specifies the degree of parallelism for concurrent operations running against a database. The default value is 8.</p>
    /// </summary>
    [Pure]
    public static T ResetMaxParallelism<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.MaxParallelism = null;
        return toolSettings;
    }
    #endregion
    #region OverwriteFiles
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetOverwriteFiles<T>(this T toolSettings, bool? overwriteFiles) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = overwriteFiles;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExtractSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T EnableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExtractSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T DisableOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExtractSettings.OverwriteFiles"/></em></p>
    ///   <p>Specifies if SqlPackage should overwrite existing files. Specifying false causes SqlPackage to abort action if an existing file is encountered. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ToggleOverwriteFiles<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.OverwriteFiles = !toolSettings.OverwriteFiles;
        return toolSettings;
    }
    #endregion
    #region Properties
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.Properties"/> to a new dictionary</em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperties<T>(this T toolSettings, IDictionary<string, object> properties) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal = properties.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Clears <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ClearProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Clear();
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Adds a new key-value-pair <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T AddProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Add(propertyKey, propertyValue);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Removes a key-value-pair from <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T RemoveProperty<T>(this T toolSettings, string propertyKey) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove(propertyKey);
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Sets a key-value-pair in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T SetProperty<T>(this T toolSettings, string propertyKey, object propertyValue) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal[propertyKey] = propertyValue;
        return toolSettings;
    }
    #region AzureStorageBlobEndpoint
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageBlobEndpoint</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage endpoint. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageBlobEndpoint<T>(this T toolSettings, string azureStorageBlobEndpoint) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageBlobEndpoint"] = azureStorageBlobEndpoint;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageBlobEndpoint</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage endpoint. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageBlobEndpoint<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageBlobEndpoint");
        return toolSettings;
    }
    #endregion
    #region AzureStorageContainer
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageContainer</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage container. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageContainer<T>(this T toolSettings, string azureStorageContainer) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageContainer"] = azureStorageContainer;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageContainer</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure Blob Storage container. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageContainer<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageContainer");
        return toolSettings;
    }
    #endregion
    #region AzureStorageKey
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageKey</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure storage account key. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageKey<T>(this T toolSettings, string azureStorageKey) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageKey"] = azureStorageKey;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageKey</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Azure storage account key. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageKey<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageKey");
        return toolSettings;
    }
    #endregion
    #region AzureStorageRootPath
    /// <summary>
    ///   <p><em>Sets <c>AzureStorageRootPath</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Storage root path within the container. Without this property, the path defaults to `servername/databasename/timestamp/`. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T SetAzureStorageRootPath<T>(this T toolSettings, string azureStorageRootPath) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["AzureStorageRootPath"] = azureStorageRootPath;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>AzureStorageRootPath</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Storage root path within the container. Without this property, the path defaults to `servername/databasename/timestamp/`. See [SqlPackage for Azure Synapse Analytics](sqlpackage-for-azure-synapse-analytics.md#extract-export-data).</p>
    /// </summary>
    [Pure]
    public static T ResetAzureStorageRootPath<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("AzureStorageRootPath");
        return toolSettings;
    }
    #endregion
    #region CommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>CommandTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T SetCommandTimeout<T>(this T toolSettings, int? commandTimeout) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CommandTimeout"] = commandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CommandTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the command timeout in seconds when executing queries against SQL Server.</p>
    /// </summary>
    [Pure]
    public static T ResetCommandTimeout<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CommandTimeout");
        return toolSettings;
    }
    #endregion
    #region CompressionOption
    /// <summary>
    ///   <p><em>Sets <c>CompressionOption</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the type of compression.</p>
    /// </summary>
    [Pure]
    public static T SetCompressionOption<T>(this T toolSettings, CompressionOption compressionOption) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["CompressionOption"] = compressionOption;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>CompressionOption</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the type of compression.</p>
    /// </summary>
    [Pure]
    public static T ResetCompressionOption<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("CompressionOption");
        return toolSettings;
    }
    #endregion
    #region DacApplicationDescription
    /// <summary>
    ///   <p><em>Sets <c>DacApplicationDescription</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the Application description to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T SetDacApplicationDescription<T>(this T toolSettings, string dacApplicationDescription) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DacApplicationDescription"] = dacApplicationDescription;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DacApplicationDescription</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the Application description to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T ResetDacApplicationDescription<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DacApplicationDescription");
        return toolSettings;
    }
    #endregion
    #region DacApplicationName
    /// <summary>
    ///   <p><em>Sets <c>DacApplicationName</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defined the Application name to be stored in the DACPAC metadata. The default value is the database name.</p>
    /// </summary>
    [Pure]
    public static T SetDacApplicationName<T>(this T toolSettings, string dacApplicationName) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DacApplicationName"] = dacApplicationName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DacApplicationName</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defined the Application name to be stored in the DACPAC metadata. The default value is the database name.</p>
    /// </summary>
    [Pure]
    public static T ResetDacApplicationName<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DacApplicationName");
        return toolSettings;
    }
    #endregion
    #region DacMajorVersion
    /// <summary>
    ///   <p><em>Sets <c>DacMajorVersion</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the major version to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T SetDacMajorVersion<T>(this T toolSettings, int? dacMajorVersion) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DacMajorVersion"] = dacMajorVersion;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DacMajorVersion</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the major version to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T ResetDacMajorVersion<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DacMajorVersion");
        return toolSettings;
    }
    #endregion
    #region DacMinorVersion
    /// <summary>
    ///   <p><em>Sets <c>DacMinorVersion</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the minor version to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T SetDacMinorVersion<T>(this T toolSettings, int? dacMinorVersion) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DacMinorVersion"] = dacMinorVersion;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DacMinorVersion</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Defines the minor version to be stored in the DACPAC metadata.</p>
    /// </summary>
    [Pure]
    public static T ResetDacMinorVersion<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DacMinorVersion");
        return toolSettings;
    }
    #endregion
    #region DatabaseLockTimeout
    /// <summary>
    ///   <p><em>Sets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetDatabaseLockTimeout<T>(this T toolSettings, int? databaseLockTimeout) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["DatabaseLockTimeout"] = databaseLockTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>DatabaseLockTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the database lock timeout in seconds when executing queries against SQLServer. Use -1 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetDatabaseLockTimeout<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("DatabaseLockTimeout");
        return toolSettings;
    }
    #endregion
    #region ExtractAllTableData
    /// <summary>
    ///   <p><em>Sets <c>ExtractAllTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Indicates whether data from all user tables is extracted. If 'true', data from all user tables is extracted, and you cannot specify individual user tables for extracting data. If 'false', specify one or more user tables to extract data from.</p>
    /// </summary>
    [Pure]
    public static T SetExtractAllTableData<T>(this T toolSettings, bool? extractAllTableData) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractAllTableData"] = extractAllTableData;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExtractAllTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Indicates whether data from all user tables is extracted. If 'true', data from all user tables is extracted, and you cannot specify individual user tables for extracting data. If 'false', specify one or more user tables to extract data from.</p>
    /// </summary>
    [Pure]
    public static T ResetExtractAllTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExtractAllTableData");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ExtractAllTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableExtractAllTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractAllTableData"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ExtractAllTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableExtractAllTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractAllTableData"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ExtractAllTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleExtractAllTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ExtractAllTableData");
        return toolSettings;
    }
    #endregion
    #region ExtractApplicationScopedObjectsOnly
    /// <summary>
    ///   <p><em>Sets <c>ExtractApplicationScopedObjectsOnly</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>If true, only extract application-scoped objects for the specified source. If false, extract all objects for the specified source.</p>
    /// </summary>
    [Pure]
    public static T SetExtractApplicationScopedObjectsOnly<T>(this T toolSettings, bool? extractApplicationScopedObjectsOnly) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractApplicationScopedObjectsOnly"] = extractApplicationScopedObjectsOnly;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExtractApplicationScopedObjectsOnly</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>If true, only extract application-scoped objects for the specified source. If false, extract all objects for the specified source.</p>
    /// </summary>
    [Pure]
    public static T ResetExtractApplicationScopedObjectsOnly<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExtractApplicationScopedObjectsOnly");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ExtractApplicationScopedObjectsOnly</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableExtractApplicationScopedObjectsOnly<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractApplicationScopedObjectsOnly"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ExtractApplicationScopedObjectsOnly</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableExtractApplicationScopedObjectsOnly<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractApplicationScopedObjectsOnly"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ExtractApplicationScopedObjectsOnly</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleExtractApplicationScopedObjectsOnly<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ExtractApplicationScopedObjectsOnly");
        return toolSettings;
    }
    #endregion
    #region ExtractReferencedServerScopedElements
    /// <summary>
    ///   <p><em>Sets <c>ExtractReferencedServerScopedElements</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>If true, extract login, server audit, and credential objects referenced by source database objects.</p>
    /// </summary>
    [Pure]
    public static T SetExtractReferencedServerScopedElements<T>(this T toolSettings, bool? extractReferencedServerScopedElements) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractReferencedServerScopedElements"] = extractReferencedServerScopedElements;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExtractReferencedServerScopedElements</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>If true, extract login, server audit, and credential objects referenced by source database objects.</p>
    /// </summary>
    [Pure]
    public static T ResetExtractReferencedServerScopedElements<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExtractReferencedServerScopedElements");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ExtractReferencedServerScopedElements</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableExtractReferencedServerScopedElements<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractReferencedServerScopedElements"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ExtractReferencedServerScopedElements</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableExtractReferencedServerScopedElements<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractReferencedServerScopedElements"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ExtractReferencedServerScopedElements</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleExtractReferencedServerScopedElements<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ExtractReferencedServerScopedElements");
        return toolSettings;
    }
    #endregion
    #region ExtractTarget
    /// <summary>
    ///   <p><em>Sets <c>ExtractTarget</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies alternative output formats of the database schema, default is 'DacPac' to output a `.dacpac` single file. Additional options output one or more `.sql` files organized by either 'SchemaObjectType' (files in folders for each schema and object type), 'Schema' (files in folders for each schema), 'ObjectType' (files in folders for each object type), 'Flat' (all files in the same folder), or 'File' (1 single file).</p>
    /// </summary>
    [Pure]
    public static T SetExtractTarget<T>(this T toolSettings, ExtractTarget extractTarget) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractTarget"] = extractTarget;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExtractTarget</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies alternative output formats of the database schema, default is 'DacPac' to output a `.dacpac` single file. Additional options output one or more `.sql` files organized by either 'SchemaObjectType' (files in folders for each schema and object type), 'Schema' (files in folders for each schema), 'ObjectType' (files in folders for each object type), 'Flat' (all files in the same folder), or 'File' (1 single file).</p>
    /// </summary>
    [Pure]
    public static T ResetExtractTarget<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExtractTarget");
        return toolSettings;
    }
    #endregion
    #region ExtractUsageProperties
    /// <summary>
    ///   <p><em>Sets <c>ExtractUsageProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether usage properties, such as table row count and index size, will be extracted from the database.</p>
    /// </summary>
    [Pure]
    public static T SetExtractUsageProperties<T>(this T toolSettings, bool? extractUsageProperties) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractUsageProperties"] = extractUsageProperties;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>ExtractUsageProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether usage properties, such as table row count and index size, will be extracted from the database.</p>
    /// </summary>
    [Pure]
    public static T ResetExtractUsageProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("ExtractUsageProperties");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>ExtractUsageProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableExtractUsageProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractUsageProperties"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>ExtractUsageProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableExtractUsageProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["ExtractUsageProperties"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>ExtractUsageProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleExtractUsageProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "ExtractUsageProperties");
        return toolSettings;
    }
    #endregion
    #region HashObjectNamesInLogs
    /// <summary>
    ///   <p><em>Sets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T SetHashObjectNamesInLogs<T>(this T toolSettings, bool? hashObjectNamesInLogs) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = hashObjectNamesInLogs;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether to replace all object names in logs with a random hash value.</p>
    /// </summary>
    [Pure]
    public static T ResetHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("HashObjectNamesInLogs");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["HashObjectNamesInLogs"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>HashObjectNamesInLogs</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleHashObjectNamesInLogs<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "HashObjectNamesInLogs");
        return toolSettings;
    }
    #endregion
    #region IgnoreExtendedProperties
    /// <summary>
    ///   <p><em>Sets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties should be ignored.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreExtendedProperties<T>(this T toolSettings, bool? ignoreExtendedProperties) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = ignoreExtendedProperties;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether extended properties should be ignored.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreExtendedProperties");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreExtendedProperties"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreExtendedProperties</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreExtendedProperties<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreExtendedProperties");
        return toolSettings;
    }
    #endregion
    #region IgnorePermissions
    /// <summary>
    ///   <p><em>Sets <c>IgnorePermissions</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions should be ignored.</p>
    /// </summary>
    [Pure]
    public static T SetIgnorePermissions<T>(this T toolSettings, bool? ignorePermissions) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = ignorePermissions;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnorePermissions</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether permissions should be ignored.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnorePermissions<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnorePermissions");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnorePermissions</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnorePermissions</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnorePermissions<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnorePermissions"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnorePermissions</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnorePermissions<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnorePermissions");
        return toolSettings;
    }
    #endregion
    #region IgnoreUserLoginMappings
    /// <summary>
    ///   <p><em>Sets <c>IgnoreUserLoginMappings</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether relationships between users and logins are ignored.</p>
    /// </summary>
    [Pure]
    public static T SetIgnoreUserLoginMappings<T>(this T toolSettings, bool? ignoreUserLoginMappings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserLoginMappings"] = ignoreUserLoginMappings;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>IgnoreUserLoginMappings</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether relationships between users and logins are ignored.</p>
    /// </summary>
    [Pure]
    public static T ResetIgnoreUserLoginMappings<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("IgnoreUserLoginMappings");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>IgnoreUserLoginMappings</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableIgnoreUserLoginMappings<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserLoginMappings"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>IgnoreUserLoginMappings</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableIgnoreUserLoginMappings<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["IgnoreUserLoginMappings"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>IgnoreUserLoginMappings</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleIgnoreUserLoginMappings<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "IgnoreUserLoginMappings");
        return toolSettings;
    }
    #endregion
    #region LongRunningCommandTimeout
    /// <summary>
    ///   <p><em>Sets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T SetLongRunningCommandTimeout<T>(this T toolSettings, int? longRunningCommandTimeout) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["LongRunningCommandTimeout"] = longRunningCommandTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>LongRunningCommandTimeout</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the long running command timeout in seconds when executing queries against SQL Server. Use 0 to wait indefinitely.</p>
    /// </summary>
    [Pure]
    public static T ResetLongRunningCommandTimeout<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("LongRunningCommandTimeout");
        return toolSettings;
    }
    #endregion
    #region Storage
    /// <summary>
    ///   <p><em>Sets <c>Storage</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the type of backing storage for the schema model used during extraction. 'Memory' is default for .NET Core version of SqlPackage. 'File' is only available and default for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T SetStorage<T>(this T toolSettings, StorageType storage) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["Storage"] = storage;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>Storage</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the type of backing storage for the schema model used during extraction. 'Memory' is default for .NET Core version of SqlPackage. 'File' is only available and default for .NET Framework version of SqlPackage.</p>
    /// </summary>
    [Pure]
    public static T ResetStorage<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("Storage");
        return toolSettings;
    }
    #endregion
    #region TableData
    /// <summary>
    ///   <p><em>Sets <c>TableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Indicates the table from which data will be extracted. Specify the table name with or without the brackets surrounding the name parts in the following format: schema_name.table_identifier.  This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T SetTableData<T>(this T toolSettings, string tableData) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TableData"] = tableData;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Indicates the table from which data will be extracted. Specify the table name with or without the brackets surrounding the name parts in the following format: schema_name.table_identifier.  This property may be specified multiple times to indicate multiple options.</p>
    /// </summary>
    [Pure]
    public static T ResetTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TableData");
        return toolSettings;
    }
    #endregion
    #region TempDirectoryForTableData
    /// <summary>
    ///   <p><em>Sets <c>TempDirectoryForTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the temporary directory used to buffer table data before being written to the package file.</p>
    /// </summary>
    [Pure]
    public static T SetTempDirectoryForTableData<T>(this T toolSettings, string tempDirectoryForTableData) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["TempDirectoryForTableData"] = tempDirectoryForTableData;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>TempDirectoryForTableData</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies the temporary directory used to buffer table data before being written to the package file.</p>
    /// </summary>
    [Pure]
    public static T ResetTempDirectoryForTableData<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("TempDirectoryForTableData");
        return toolSettings;
    }
    #endregion
    #region VerifyExtraction
    /// <summary>
    ///   <p><em>Sets <c>VerifyExtraction</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether the extracted schema model should be verified.</p>
    /// </summary>
    [Pure]
    public static T SetVerifyExtraction<T>(this T toolSettings, bool? verifyExtraction) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = verifyExtraction;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <c>VerifyExtraction</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies whether the extracted schema model should be verified.</p>
    /// </summary>
    [Pure]
    public static T ResetVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal.Remove("VerifyExtraction");
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <c>VerifyExtraction</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T EnableVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <c>VerifyExtraction</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T DisableVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.PropertiesInternal["VerifyExtraction"] = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <c>VerifyExtraction</c> in <see cref="SqlPackageExtractSettings.Properties"/></em></p>
    ///   <p>Specifies a name value pair for an [action-specific property](#properties-specific-to-the-extract-action); {PropertyName}={Value}.</p>
    /// </summary>
    [Pure]
    public static T ToggleVerifyExtraction<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        ExtensionHelper.ToggleBoolean(toolSettings.PropertiesInternal, "VerifyExtraction");
        return toolSettings;
    }
    #endregion
    #endregion
    #region Quiet
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T SetQuiet<T>(this T toolSettings, bool? quiet) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = quiet;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ResetQuiet<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExtractSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T EnableQuiet<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExtractSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T DisableQuiet<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExtractSettings.Quiet"/></em></p>
    ///   <p>Specifies whether detailed feedback is suppressed. Defaults to False.</p>
    /// </summary>
    [Pure]
    public static T ToggleQuiet<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.Quiet = !toolSettings.Quiet;
        return toolSettings;
    }
    #endregion
    #region SourceConnectionString
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T SetSourceConnectionString<T>(this T toolSettings, string sourceConnectionString) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = sourceConnectionString;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceConnectionString"/></em></p>
    ///   <p>Specifies a valid [SQL Server/Azure connection string](/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring) to the source database. If this parameter is specified, it shall be used exclusively of all other source parameters.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceConnectionString<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceConnectionString = null;
        return toolSettings;
    }
    #endregion
    #region SourceDatabaseName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceDatabaseName<T>(this T toolSettings, string sourceDatabaseName) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = sourceDatabaseName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceDatabaseName"/></em></p>
    ///   <p>Defines the name of the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceDatabaseName<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceDatabaseName = null;
        return toolSettings;
    }
    #endregion
    #region SourceEncryptConnection
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T SetSourceEncryptConnection<T>(this T toolSettings, EncryptionType sourceEncryptConnection) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = sourceEncryptConnection;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceEncryptConnection"/></em></p>
    ///   <p>Specifies if SQL encryption should be used for the source database connection. Default value is True.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceEncryptConnection<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceEncryptConnection = null;
        return toolSettings;
    }
    #endregion
    #region SourceHostNameInCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T SetSourceHostNameInCertificate<T>(this T toolSettings, string sourceHostNameInCertificate) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = sourceHostNameInCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceHostNameInCertificate"/></em></p>
    ///   <p>Specifies value that is used to validate the source SQL Server TLS/SSL certificate when the communication layer is encrypted by using TLS.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceHostNameInCertificate<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceHostNameInCertificate = null;
        return toolSettings;
    }
    #endregion
    #region SourcePassword
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourcePassword<T>(this T toolSettings, string sourcePassword) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = sourcePassword;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourcePassword"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the password to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourcePassword<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourcePassword = null;
        return toolSettings;
    }
    #endregion
    #region SourceServerName
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceServerName<T>(this T toolSettings, string sourceServerName) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = sourceServerName;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceServerName"/></em></p>
    ///   <p>Defines the name of the server hosting the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceServerName<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceServerName = null;
        return toolSettings;
    }
    #endregion
    #region SourceTimeout
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTimeout<T>(this T toolSettings, int? sourceTimeout) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = sourceTimeout;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceTimeout"/></em></p>
    ///   <p>Specifies the timeout for establishing a connection to the source database in seconds.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTimeout<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTimeout = null;
        return toolSettings;
    }
    #endregion
    #region SourceTrustServerCertificate
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T SetSourceTrustServerCertificate<T>(this T toolSettings, bool? sourceTrustServerCertificate) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = sourceTrustServerCertificate;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T EnableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T DisableSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExtractSettings.SourceTrustServerCertificate"/></em></p>
    ///   <p>Specifies whether to use TLS to encrypt the source database connection and bypass walking the certificate chain to validate trust. Default value is False.</p>
    /// </summary>
    [Pure]
    public static T ToggleSourceTrustServerCertificate<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceTrustServerCertificate = !toolSettings.SourceTrustServerCertificate;
        return toolSettings;
    }
    #endregion
    #region SourceUser
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T SetSourceUser<T>(this T toolSettings, string sourceUser) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = sourceUser;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.SourceUser"/></em></p>
    ///   <p>For SQL Server Auth scenarios, defines the SQL Server user to use to access the source database.</p>
    /// </summary>
    [Pure]
    public static T ResetSourceUser<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.SourceUser = null;
        return toolSettings;
    }
    #endregion
    #region TargetFile
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) in local storage to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T SetTargetFile<T>(this T toolSettings, string targetFile) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = targetFile;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.TargetFile"/></em></p>
    ///   <p>Specifies a target file (that is, a .dacpac file) in local storage to be used as the target of action instead of a database. If this parameter is used, no other target parameter shall be valid. This parameter shall be invalid for actions that only support database targets.</p>
    /// </summary>
    [Pure]
    public static T ResetTargetFile<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TargetFile = null;
        return toolSettings;
    }
    #endregion
    #region TenantId
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetTenantId<T>(this T toolSettings, string tenantId) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = tenantId;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.TenantId"/></em></p>
    ///   <p>Represents the Azure AD tenant ID or domain name. This option is required to support guest or imported Azure AD users as well as Microsoft accounts such as outlook.com, hotmail.com, or live.com. If this parameter is omitted, the default tenant ID for Azure AD will be used, assuming that the authenticated user is a native user for this AD. However, in this case any guest or imported users and/or Microsoft accounts hosted in this Azure AD are not supported and the operation will fail. <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetTenantId<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.TenantId = null;
        return toolSettings;
    }
    #endregion
    #region ThreadMaxStackSize
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T SetThreadMaxStackSize<T>(this T toolSettings, int? threadMaxStackSize) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = threadMaxStackSize;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.ThreadMaxStackSize"/></em></p>
    ///   <p>Specifies the maximum size in megabytes for the thread running the SqlPackage action. This option should only be used when encountering stack overflow exceptions that occur when parsing very large TSQL statements.</p>
    /// </summary>
    [Pure]
    public static T ResetThreadMaxStackSize<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.ThreadMaxStackSize = null;
        return toolSettings;
    }
    #endregion
    #region UniversalAuthentication
    /// <summary>
    ///   <p><em>Sets <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T SetUniversalAuthentication<T>(this T toolSettings, bool? universalAuthentication) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = universalAuthentication;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Resets <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ResetUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = null;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Enables <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T EnableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = true;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Disables <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T DisableUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = false;
        return toolSettings;
    }
    /// <summary>
    ///   <p><em>Toggles <see cref="SqlPackageExtractSettings.UniversalAuthentication"/></em></p>
    ///   <p>Specifies if Universal Authentication should be used. When set to True, the interactive authentication protocol is activated supporting MFA. This option can also be used for Azure AD authentication without MFA, using an interactive protocol requiring the user to enter their username and password or integrated authentication (Windows credentials). When /UniversalAuthentication is set to True, no Azure AD authentication can be specified in SourceConnectionString (/scs). When /UniversalAuthentication is set to False, Azure AD authentication must be specified in SourceConnectionString (/scs). <br/> For more information about Active Directory Universal Authentication, see [Universal Authentication with SQL Database and Azure Synapse Analytics (SSMS support for MFA)](/azure/sql-database/sql-database-ssms-mfa-authentication).</p>
    /// </summary>
    [Pure]
    public static T ToggleUniversalAuthentication<T>(this T toolSettings) where T : SqlPackageExtractSettings
    {
        toolSettings = toolSettings.NewInstance();
        toolSettings.UniversalAuthentication = !toolSettings.UniversalAuthentication;
        return toolSettings;
    }
    #endregion
}
#endregion
#region AzureKeyVaultAuthMethod
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<AzureKeyVaultAuthMethod>))]
public partial class AzureKeyVaultAuthMethod : Enumeration
{
    public static AzureKeyVaultAuthMethod Interactive = (AzureKeyVaultAuthMethod) "Interactive";
    public static AzureKeyVaultAuthMethod ClientIdSecret = (AzureKeyVaultAuthMethod) "ClientIdSecret";
    public static implicit operator AzureKeyVaultAuthMethod(string value)
    {
        return new AzureKeyVaultAuthMethod { Value = value };
    }
}
#endregion
#region EncryptionType
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<EncryptionType>))]
public partial class EncryptionType : Enumeration
{
    public static EncryptionType Optional = (EncryptionType) "Optional";
    public static EncryptionType Mandatory = (EncryptionType) "Mandatory";
    public static EncryptionType Strict = (EncryptionType) "Strict";
    public static EncryptionType True = (EncryptionType) "True";
    public static EncryptionType False = (EncryptionType) "False";
    public static implicit operator EncryptionType(string value)
    {
        return new EncryptionType { Value = value };
    }
}
#endregion
#region DatabaseEdition
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DatabaseEdition>))]
public partial class DatabaseEdition : Enumeration
{
    public static DatabaseEdition Basic = (DatabaseEdition) "Basic";
    public static DatabaseEdition Standard = (DatabaseEdition) "Standard";
    public static DatabaseEdition Premium = (DatabaseEdition) "Premium";
    public static DatabaseEdition Datawarehouse = (DatabaseEdition) "Datawarehouse";
    public static DatabaseEdition GeneralPurpose = (DatabaseEdition) "GeneralPurpose";
    public static DatabaseEdition BusinessCritical = (DatabaseEdition) "BusinessCritical";
    public static DatabaseEdition Hyperscale = (DatabaseEdition) "Hyperscale";
    public static DatabaseEdition Default = (DatabaseEdition) "Default";
    public static implicit operator DatabaseEdition(string value)
    {
        return new DatabaseEdition { Value = value };
    }
}
#endregion
#region StorageType
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<StorageType>))]
public partial class StorageType : Enumeration
{
    public static StorageType File = (StorageType) "File";
    public static StorageType Memory = (StorageType) "Memory";
    public static implicit operator StorageType(string value)
    {
        return new StorageType { Value = value };
    }
}
#endregion
#region CompressionOption
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<CompressionOption>))]
public partial class CompressionOption : Enumeration
{
    public static CompressionOption Normal = (CompressionOption) "Normal";
    public static CompressionOption Maximum = (CompressionOption) "Maximum";
    public static CompressionOption Fast = (CompressionOption) "Fast";
    public static CompressionOption SuperFast = (CompressionOption) "SuperFast";
    public static CompressionOption NotCompressed = (CompressionOption) "NotCompressed";
    public static implicit operator CompressionOption(string value)
    {
        return new CompressionOption { Value = value };
    }
}
#endregion
#region TargetEngineVersion
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<TargetEngineVersion>))]
public partial class TargetEngineVersion : Enumeration
{
    public static TargetEngineVersion Default = (TargetEngineVersion) "Default";
    public static TargetEngineVersion Latest = (TargetEngineVersion) "Latest";
    public static TargetEngineVersion V11 = (TargetEngineVersion) "V11";
    public static TargetEngineVersion V12 = (TargetEngineVersion) "V12";
    public static implicit operator TargetEngineVersion(string value)
    {
        return new TargetEngineVersion { Value = value };
    }
}
#endregion
#region ExtractTarget
/// <summary>
///   Used within <see cref="SqlPackageTasks"/>.
/// </summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<ExtractTarget>))]
public partial class ExtractTarget : Enumeration
{
    public static ExtractTarget DacPac = (ExtractTarget) "DacPac";
    public static ExtractTarget File = (ExtractTarget) "File";
    public static ExtractTarget Flat = (ExtractTarget) "Flat";
    public static ExtractTarget ObjectType = (ExtractTarget) "ObjectType";
    public static ExtractTarget Schema = (ExtractTarget) "Schema";
    public static ExtractTarget SchemaObjectType = (ExtractTarget) "SchemaObjectType";
    public static implicit operator ExtractTarget(string value)
    {
        return new ExtractTarget { Value = value };
    }
}
#endregion
